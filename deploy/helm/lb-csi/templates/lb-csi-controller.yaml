{{$kubeVersion := (or .Values.kubeVersion .Capabilities.KubeVersion.Version) | trimPrefix "v" }}
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: lb-csi-controller
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: lb-csi-plugin
      role: controller
  updateStrategy:
    type: RollingUpdate
  serviceName: "lb-csi-ctrl-svc"
  replicas: 1
  template:
    metadata:
      labels:
        app: lb-csi-plugin
        role: controller
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: {{ .Values.controllerServiceAccountName }}
      containers:
        - name: lb-csi-plugin
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: {{ .Values.imageRegistry }}/{{ .Values.image }}
          args :
            - "-P"
          env:
          - name: CSI_ENDPOINT
            value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: LB_CSI_NODE_ID
            value: $(KUBE_NODE_NAME).ctrl
          - name: LB_CSI_LOG_LEVEL
            value: debug
          - name: LB_CSI_LOG_ROLE
            value: controller
          - name: LB_CSI_LOG_FMT
            value: text
          - name: LB_CSI_LOG_TIME
            value: "true"
{{- if .Values.rwx }}
          - name: LB_CSI_RWX
            value: {{ .Values.rwx | quote }}
{{- end }}
          imagePullPolicy: "Always"
          volumeMounts:
          - name: socket-dir
            mountPath: /var/lib/csi/sockets/pluginproxy/
{{- range .Values.jwtSecret }}
          - name: {{ .name }}
            mountPath: "/etc/lb-csi"
{{- end }}
        - name: csi-provisioner
          image: {{ .Values.sidecarImageRegistry }}/sig-storage/csi-provisioner:v2.2.2
          args:
          - "--csi-address=$(ADDRESS)"
          - "--v=4"
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
          - name: socket-dir
            mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: {{ .Values.sidecarImageRegistry }}/sig-storage/csi-attacher:v3.3.0
          args:
          - "--v=4"
          - "--csi-address=$(ADDRESS)"
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
          - name: socket-dir
            mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-resizer
          image: {{ .Values.sidecarImageRegistry }}/sig-storage/csi-resizer:v1.2.0
          args:
          - "--v=5"
          - "--csi-address=$(ADDRESS)"
          env:
          - name: ADDRESS
            value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
          - name: socket-dir
            mountPath: /var/lib/csi/sockets/pluginproxy/
{{- if and ($kubeVersion | semverCompare ">=1.17.0") ( .Values.enableSnapshot ) }}
        - name: csi-snapshotter
{{- if ($kubeVersion | semverCompare ">=1.17.0 < 1.20.0") }}
          image: {{ .Values.sidecarImageRegistry }}/sig-storage/csi-snapshotter:v3.0.3
{{- else }}
          image: {{ .Values.sidecarImageRegistry }}/sig-storage/csi-snapshotter:v4.2.1
{{- end }}
          args:
          - "--v=5"
          - "--csi-address=$(ADDRESS)"
          - "--leader-election=false"
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: Always
          volumeMounts:
          - name: socket-dir
            mountPath: /var/lib/csi/sockets/pluginproxy/
{{- end }}
      volumes:
      - name: socket-dir
        emptyDir: {}
{{- range .Values.jwtSecret }}
      - name: {{ .name }}
        secret:
          secretName: {{ .name }}
          items:
          - key: jwt
            path: jwt
            mode: 0777
{{- end }}
{{- if empty .Values.imagePullSecrets | not }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
      - name: {{ . | quote }}
      {{- end }}
{{- else }}
      # to enable seamless access to secure private Docker registries (e.g. to
      # `docker.lightbitslabs.com/lightos-k8s`), create a k8s secret with
      # the corresponding credentials and reference it in an `imagePullSecrets`
      # clause here, as an immediate descendant of `spec.template.spec`:
      #imagePullSecrets:
      #- name: my-docker-registry-credentials-secret
{{- end }}

{{- if .Values.lbControllerTolerations }}
      tolerations:
       - key: {{ .Values.lbControllerTolerations.key}}
         operator: {{ .Values.lbControllerTolerations.operator}}
         value: {{ .Values.lbControllerTolerations.value}}
         effect: {{ .Values.lbControllerTolerations.effect}}
{{- end }}
