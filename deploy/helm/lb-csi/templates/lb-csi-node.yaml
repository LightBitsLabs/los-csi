kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: lb-csi-node
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: lb-csi-plugin
      role: node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: lb-csi-plugin
        role: node
    spec:
      priorityClassName: system-node-critical
      serviceAccount: {{ .Values.nodeServiceAccountName }}
      hostNetwork: true
      initContainers:
        - name: init-nvme-tcp
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: {{ .Values.imageRegistry }}/busybox:1.30.1
          command:
          - /bin/sh
          - -c
          - >-
            [ -e /sys/module/nvme_tcp ] &&
            modinfo nvme_tcp ||
            { modinfo nvme_tcp && modprobe nvme_tcp ; } ||
            { echo "FAILED to load nvme-tcp kernel driver" && exit 1 ; }
          securityContext:
            privileged: true
          volumeMounts:
            - name: modules-dir
              mountPath: /lib/modules
              mountPropagation: HostToContainer
      containers:
        - name: lb-csi-plugin
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: {{ .Values.imageRegistry }}/{{ .Values.image }}
          args :
            - "-P"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LB_CSI_NODE_ID
              value: $(KUBE_NODE_NAME).node
            - name: LB_CSI_LOG_LEVEL
              value: debug
            - name: LB_CSI_LOG_ROLE
              value: node
            - name: LB_CSI_LOG_FMT
              value: text
            - name: LB_CSI_LOG_TIME
              value: "true"
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: {{ .Values.kubeletRootDir }}
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - name: discovery-client-dir
              mountPath: /etc/discovery-client/discovery.d
            # to inject jwt from secret using volume mount uncomment
            # the following. Will create file under /etc/lb-csi/jwt with jwt value
            # in secret named `los-secret`
            # - name: lb-csi-secret-vol
            #   mountPath: "/etc/lb-csi"
        - name: csi-node-driver-registrar
          # if hosting the K8s CSI plugin sidecar container images in a
          # different registry, e.g. a local private Docker registry,
          # modify the image identifier below accordingly:
          image: {{ .Values.sidecarImageRegistry }}/k8scsi/csi-node-driver-registrar:v1.2.0
          args:
            - "--v=4"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.lightbitslabs.com /registration/csi.lightbitslabs.com-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: {{ .Values.kubeletRootDir }}/plugins/csi.lightbitslabs.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
{{- if .Values.discoveryClientInContainer }}
        - name: lb-nvme-discovery-client
{{- if .Values.discoveryClientImage }}
          image: {{ .Values.imageRegistry }}/{{ .Values.discoveryClientImage }}
{{- else }}
          image: {{ .Values.imageRegistry }}/lb-nvme-discovery-client:{{ .Chart.AppVersion }}
{{- end }}
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: device-dir
              mountPath: /dev
            - name: discovery-client-dir
              mountPath: /etc/discovery-client/discovery.d
{{- end }}
      volumes:
        - name: registration-dir
          hostPath:
            path: {{ .Values.kubeletRootDir }}/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: {{ .Values.kubeletRootDir }}/plugins/csi.lightbitslabs.com
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: {{ .Values.kubeletRootDir }}
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: modules-dir
          hostPath:
            path: /lib/modules
{{- if .Values.discoveryClientInContainer }}
        - name: discovery-client-dir
          emptyDir: {}
{{- else }}
        - name: discovery-client-dir
          hostPath:
            path: /etc/discovery-client/discovery.d
            type: Directory
{{- end }}
        # - name: lb-csi-secret-vol
        #   secret:
        #     secretName: los-secret
        #     items:
        #     - key: jwt
        #       path: jwt
        #       mode: 0777
{{- if empty .Values.imagePullSecrets | not }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
       - name: {{ . | quote }}
      {{- end }}
{{- else }}
      # to enable seamless access to secure private Docker registries (e.g. to
      # `docker.lightbitslabs.com/lightos-k8s`), create a k8s secret with
      # the corresponding credentials and reference it in an `imagePullSecrets`
      # clause here, as an immediate descendant of `spec.template.spec`:
      #imagePullSecrets:
      #- name: my-docker-registry-credentials-secret
{{- end }}
