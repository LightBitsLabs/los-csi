# CSINodeInfo ----------------------------------------------------------

# taken from: https://raw.githubusercontent.com/kubernetes/csi-api/master/pkg/crd/manifests/csinodeinfo.yaml

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: csinodeinfos.csi.storage.k8s.io
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  group: csi.storage.k8s.io
  names:
    kind: CSINodeInfo
    plural: csinodeinfos
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: Specification of CSINodeInfo
          properties:
            drivers:
              description: List of CSI drivers running on the node and their specs.
              type: array
              items:
                properties:
                  name:
                    description: The CSI driver that this object refers to.
                    type: string
                  nodeID:
                    description: The node from the driver point of view.
                    type: string
                  topologyKeys:
                    description: List of keys supported by the driver.
                    items:
                      type: string
                    type: array
        status:
          description: Status of CSINodeInfo
          properties:
            drivers:
              description: List of CSI drivers running on the node and their statuses.
              type: array
              items:
                properties:
                  name:
                    description: The CSI driver that this object refers to.
                    type: string
                  available:
                    description: Whether the CSI driver is installed.
                    type: boolean
                  volumePluginMechanism:
                    description: Indicates to external components the required mechanism
                      to use for any in-tree plugins replaced by this driver.
                    pattern: in-tree|csi
                    type: string
  version: v1alpha1

---

# Controller plugin ----------------------------------------------------------

kind: ServiceAccount
apiVersion: v1
metadata:
  name: lb-csi-ctrl-sa
  namespace: kube-system

---

# Role needed to create CRD on the cluster level
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: lb-csi-crd-role
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["*"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["create", "delete"]

---

# RoleBinding grant lb-csi-ctrl-sa serviceaccount to create the CSIDriver CRD
# we need on our behalf.
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: lb-csi-crd-binding
subjects:
  - kind: ServiceAccount
    name: lb-csi-ctrl-sa
    namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: lb-csi-crd-role

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: lb-csi-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: lb-csi-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: lb-csi-ctrl-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: lb-csi-provisioner-role
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: lb-csi-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: lb-csi-attacher-binding
subjects:
  - kind: ServiceAccount
    name: lb-csi-ctrl-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: lb-csi-attacher-role
  apiGroup: rbac.authorization.k8s.io

---

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: lb-csi-controller
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: lb-csi-plugin
      role: controller
  serviceName: "lb-csi-ctrl-svc"
  replicas: 1
  template:
    metadata:
      labels:
        app: lb-csi-plugin
        role: controller
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: lb-csi-ctrl-sa
      containers:
        - name: lb-csi-plugin
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: __DOCKER_REGISTRY____DOCKER_TAG__
          args :
            - "-P"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LB_CSI_NODE_ID
              value: $(KUBE_NODE_NAME).ctrl
            - name: LB_CSI_LOG_LEVEL
              value: debug
            - name: LB_CSI_LOG_ROLE
              value: controller
            - name: LB_CSI_LOG_FMT
              value: text
            - name: LB_CSI_LOG_TIME
              value: "true"
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-provisioner
          # if hosting the K8s CSI plugin sidecar container images in a
          # different registry, e.g. a local private Docker registry,
          # modify the image identifier below accordingly:
          image: __SIDECAR_DOCKER_REGISTRY__/k8scsi/csi-provisioner:v1.5.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          # if hosting the K8s CSI plugin sidecar container images in a
          # different registry, e.g. a local private Docker registry,
          # modify the image identifier below accordingly:
          image: __SIDECAR_DOCKER_REGISTRY__/k8scsi/csi-attacher:v1.2.0
          args:
            - "--v=4"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-cluster-driver-registrar
          # if hosting the K8s CSI plugin sidecar container images in a
          # different registry, e.g. a local private Docker registry,
          # modify the image identifier below accordingly:
          image: __SIDECAR_DOCKER_REGISTRY__/k8scsi/csi-cluster-driver-registrar:v1.0.1
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          args:
            - "--v=4"
            - "--csi-address=$(ADDRESS)"
            - "--pod-info-mount-version=v1"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "/usr/bin/killall -INT cluster-driver-registrar" ]
      volumes:
        - name: socket-dir
          emptyDir: {}
      # to enable seamless access to secure private Docker registries (e.g. to
      # `docker.lightbitslabs.com/lightos-k8s`), create a k8s secret with
      # the corresponding credentials and reference it in an `imagePullSecrets`
      # clause here, as an immediate descendant of `spec.template.spec`:
      #imagePullSecrets:
      #- name: my-docker-registry-credentials-secret

---

# Node plugin ----------------------------------------------------------------

kind: ServiceAccount
apiVersion: v1
metadata:
  name: lb-csi-node-sa
  namespace: kube-system

---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: lb-csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: lb-csi-plugin
      role: node
  template:
    metadata:
      labels:
        app: lb-csi-plugin
        role: node
    spec:
      priorityClassName: system-node-critical
      serviceAccount: lb-csi-node-sa
      hostNetwork: true
      initContainers:
        - name: init-nvme-tcp
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: __DOCKER_REGISTRY__busybox:1.30.1
          command:
          - /bin/sh
          - -c
          - >-
            [ -e /sys/module/nvme_tcp ] &&
            modinfo nvme_tcp ||
            { modinfo nvme_tcp && modprobe nvme_tcp ; } ||
            { echo "FAILED to load nvme-tcp kernel driver" && exit 1 ; }
          securityContext:
            privileged: true
          volumeMounts:
            - name: modules-dir
              mountPath: /lib/modules
              mountPropagation: HostToContainer
      containers:
        - name: lb-csi-plugin
          # if hosting the plugin in a different registry, e.g. a local private
          # Docker registry, modify the image identifier below accordingly:
          image: __DOCKER_REGISTRY____DOCKER_TAG__
          args :
            - "-P"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LB_CSI_NODE_ID
              value: $(KUBE_NODE_NAME).node
            - name: LB_CSI_LOG_LEVEL
              value: debug
            - name: LB_CSI_LOG_ROLE
              value: node
            - name: LB_CSI_LOG_FMT
              value: text
            - name: LB_CSI_LOG_TIME
              value: "true"
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - name: discovery-client-dir
              mountPath: /etc/discovery-client/discovery.d
        - name: csi-node-driver-registrar
          # if hosting the K8s CSI plugin sidecar container images in a
          # different registry, e.g. a local private Docker registry,
          # modify the image identifier below accordingly:
          image: __SIDECAR_DOCKER_REGISTRY__/k8scsi/csi-node-driver-registrar:v1.2.0
          args:
            - "--v=4"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.lightbitslabs.com /registration/csi.lightbitslabs.com-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi.lightbitslabs.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.lightbitslabs.com
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: modules-dir
          hostPath:
            path: /lib/modules
        - name: discovery-client-dir
          hostPath:
            path: /etc/discovery-client/discovery.d
            type: Directory
      # to enable seamless access to secure private Docker registries (e.g. to
      # `docker.lightbitslabs.com/lightos-k8s`), create a k8s secret with
      # the corresponding credentials and reference it in an `imagePullSecrets`
      # clause here, as an immediate descendant of `spec.template.spec`:
      #imagePullSecrets:
      #- name: my-docker-registry-credentials-secret
