// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api-service/statisticsapiv2.proto

package durospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

///////////////////////////////////////
//   API structures (external facing)
///////////////////////////////////////
type ClusterStatisticsApi struct {
	// Installed Physical Storage
	//
	// All installed SSDs capacities over all servers in cluster, given in bytes.
	InstalledPhysicalStorage uint64 `protobuf:"varint,1,opt,name=installedPhysicalStorage,proto3" json:"installedPhysicalStorage,omitempty"`
	// Total Attached Physical Storage
	//
	// Sum of all managed and healthy SSDs capacities, given in bytes.
	ManagedPhysicalStorage uint64 `protobuf:"varint,2,opt,name=managedPhysicalStorage,proto3" json:"managedPhysicalStorage,omitempty"`
	// Effective Physical Storage
	//
	// Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
	EffectivePhysicalStorage uint64 `protobuf:"varint,3,opt,name=effectivePhysicalStorage,proto3" json:"effectivePhysicalStorage,omitempty"`
	// Logical Storage
	//
	// Sum of capacities of all allocated volumes, given in bytes.
	LogicalStorage uint64 `protobuf:"varint,4,opt,name=logicalStorage,proto3" json:"logicalStorage,omitempty"`
	// Logical Used Storage
	//
	// Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,5,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage Excluding Parity
	//
	// Physical storage space occupied by all volumes (data only), given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,6,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
	PhysicalUsedStorageIncludingParity uint64 `protobuf:"varint,7,opt,name=physicalUsedStorageIncludingParity,proto3" json:"physicalUsedStorageIncludingParity,omitempty"`
	// Free Physical Storage
	//
	// Free storage before entering to read-only mode , given in bytes.
	FreePhysicalStorage uint64 `protobuf:"varint,8,opt,name=freePhysicalStorage,proto3" json:"freePhysicalStorage,omitempty"`
	// Estimated Free Logical Storage
	//
	// Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
	EstimatedFreeLogicalStorage uint64 `protobuf:"varint,9,opt,name=estimatedFreeLogicalStorage,proto3" json:"estimatedFreeLogicalStorage,omitempty"`
	// Estimated Total Available Logical Storage
	//
	// Estimate of total available logical storage based on current compression ratio (effective * compression)
	EstimatedLogicalStorage uint64 `protobuf:"varint,10,opt,name=estimatedLogicalStorage,proto3" json:"estimatedLogicalStorage,omitempty"`
	// commpression ratio
	//
	// compression ratio logicalUsedStorage/physicalUsedStorage
	CompressionRatio     float64  `protobuf:"fixed64,11,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterStatisticsApi) Reset()         { *m = ClusterStatisticsApi{} }
func (m *ClusterStatisticsApi) String() string { return proto.CompactTextString(m) }
func (*ClusterStatisticsApi) ProtoMessage()    {}
func (*ClusterStatisticsApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c360bfa0295e261, []int{0}
}

func (m *ClusterStatisticsApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterStatisticsApi.Unmarshal(m, b)
}
func (m *ClusterStatisticsApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterStatisticsApi.Marshal(b, m, deterministic)
}
func (m *ClusterStatisticsApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStatisticsApi.Merge(m, src)
}
func (m *ClusterStatisticsApi) XXX_Size() int {
	return xxx_messageInfo_ClusterStatisticsApi.Size(m)
}
func (m *ClusterStatisticsApi) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStatisticsApi.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStatisticsApi proto.InternalMessageInfo

func (m *ClusterStatisticsApi) GetInstalledPhysicalStorage() uint64 {
	if m != nil {
		return m.InstalledPhysicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetManagedPhysicalStorage() uint64 {
	if m != nil {
		return m.ManagedPhysicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetEffectivePhysicalStorage() uint64 {
	if m != nil {
		return m.EffectivePhysicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetLogicalStorage() uint64 {
	if m != nil {
		return m.LogicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetLogicalUsedStorage() uint64 {
	if m != nil {
		return m.LogicalUsedStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if m != nil {
		return m.PhysicalUsedStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetPhysicalUsedStorageIncludingParity() uint64 {
	if m != nil {
		return m.PhysicalUsedStorageIncludingParity
	}
	return 0
}

func (m *ClusterStatisticsApi) GetFreePhysicalStorage() uint64 {
	if m != nil {
		return m.FreePhysicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetEstimatedFreeLogicalStorage() uint64 {
	if m != nil {
		return m.EstimatedFreeLogicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetEstimatedLogicalStorage() uint64 {
	if m != nil {
		return m.EstimatedLogicalStorage
	}
	return 0
}

func (m *ClusterStatisticsApi) GetCompressionRatio() float64 {
	if m != nil {
		return m.CompressionRatio
	}
	return 0
}

type NodeStatisticsApi struct {
	// Total Attached Physical Total Storage
	//
	// Sum of all managed and healthy SSDs capacities, given in bytes.
	ManagedPhysicalStorage uint64 `protobuf:"varint,1,opt,name=managedPhysicalStorage,proto3" json:"managedPhysicalStorage,omitempty"`
	// Effective Physical Storage
	//
	// Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
	EffectivePhysicalStorage uint64 `protobuf:"varint,2,opt,name=effectivePhysicalStorage,proto3" json:"effectivePhysicalStorage,omitempty"`
	// Logical Storage
	//
	// Sum of capacities of all allocated volumes, given in bytes.
	LogicalStorage uint64 `protobuf:"varint,3,opt,name=logicalStorage,proto3" json:"logicalStorage,omitempty"`
	// Logical Used Storage
	//
	// Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,4,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage Excluding Parity
	//
	// Physical storage space occupied by all volumes (data only), given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,5,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
	PhysicalUsedStorageIncludingParity uint64 `protobuf:"varint,6,opt,name=physicalUsedStorageIncludingParity,proto3" json:"physicalUsedStorageIncludingParity,omitempty"`
	// Free Physical Storage
	//
	// Free storage before entering to read-only mode, given in bytes.
	FreePhysicalStorage uint64 `protobuf:"varint,7,opt,name=freePhysicalStorage,proto3" json:"freePhysicalStorage,omitempty"`
	// Estimated Free Logical Storage
	//
	// Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
	EstimatedFreeLogicalStorage uint64 `protobuf:"varint,8,opt,name=estimatedFreeLogicalStorage,proto3" json:"estimatedFreeLogicalStorage,omitempty"`
	// Estimated Total Available Logical Storage
	//
	// Estimate of total available logical storage based on current compression ratio (effective * compression)
	EstimatedLogicalStorage uint64 `protobuf:"varint,9,opt,name=estimatedLogicalStorage,proto3" json:"estimatedLogicalStorage,omitempty"`
	// commpression ratio
	//
	// compression ratio logicalUsedStorage/physicalUsedStorage
	CompressionRatio     float64  `protobuf:"fixed64,10,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatisticsApi) Reset()         { *m = NodeStatisticsApi{} }
func (m *NodeStatisticsApi) String() string { return proto.CompactTextString(m) }
func (*NodeStatisticsApi) ProtoMessage()    {}
func (*NodeStatisticsApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c360bfa0295e261, []int{1}
}

func (m *NodeStatisticsApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStatisticsApi.Unmarshal(m, b)
}
func (m *NodeStatisticsApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStatisticsApi.Marshal(b, m, deterministic)
}
func (m *NodeStatisticsApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatisticsApi.Merge(m, src)
}
func (m *NodeStatisticsApi) XXX_Size() int {
	return xxx_messageInfo_NodeStatisticsApi.Size(m)
}
func (m *NodeStatisticsApi) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatisticsApi.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatisticsApi proto.InternalMessageInfo

func (m *NodeStatisticsApi) GetManagedPhysicalStorage() uint64 {
	if m != nil {
		return m.ManagedPhysicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetEffectivePhysicalStorage() uint64 {
	if m != nil {
		return m.EffectivePhysicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetLogicalStorage() uint64 {
	if m != nil {
		return m.LogicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetLogicalUsedStorage() uint64 {
	if m != nil {
		return m.LogicalUsedStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if m != nil {
		return m.PhysicalUsedStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetPhysicalUsedStorageIncludingParity() uint64 {
	if m != nil {
		return m.PhysicalUsedStorageIncludingParity
	}
	return 0
}

func (m *NodeStatisticsApi) GetFreePhysicalStorage() uint64 {
	if m != nil {
		return m.FreePhysicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetEstimatedFreeLogicalStorage() uint64 {
	if m != nil {
		return m.EstimatedFreeLogicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetEstimatedLogicalStorage() uint64 {
	if m != nil {
		return m.EstimatedLogicalStorage
	}
	return 0
}

func (m *NodeStatisticsApi) GetCompressionRatio() float64 {
	if m != nil {
		return m.CompressionRatio
	}
	return 0
}

type VolumeStatisticsApi struct {
	// Logical Used Storage
	//
	// Logical storage space used by volume, given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,1,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space used by volume excluding parity, given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,2,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// commpression ratio
	//
	// compression ratio userWritten/physicalCapacity
	CompressionRatio float64 `protobuf:"fixed64,3,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	// total commpression ratio
	//
	// compression ratio sum(userWritten) / sum(physical capacity)
	TotalCompressionRatio float64 `protobuf:"fixed64,4,opt,name=totalCompressionRatio,proto3" json:"totalCompressionRatio,omitempty"`
	// PhysicalCapacity
	//
	// The physical capacity that exists in this volume layer
	PhysicalCapacity uint64 `protobuf:"varint,5,opt,name=physicalCapacity,proto3" json:"physicalCapacity,omitempty"`
	// Physical Owned storage Capacity
	//
	// The capacity that would be freed when volume is deleted
	PhysicalOwnedCapacity uint64   `protobuf:"varint,6,opt,name=physicalOwnedCapacity,proto3" json:"physicalOwnedCapacity,omitempty"`
	PhysicalOwnedMemory   uint64   `protobuf:"varint,7,opt,name=physicalOwnedMemory,proto3" json:"physicalOwnedMemory,omitempty"`
	PhysicalMemory        uint64   `protobuf:"varint,8,opt,name=physicalMemory,proto3" json:"physicalMemory,omitempty"`
	UserWritten           uint64   `protobuf:"varint,9,opt,name=userWritten,proto3" json:"userWritten,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VolumeStatisticsApi) Reset()         { *m = VolumeStatisticsApi{} }
func (m *VolumeStatisticsApi) String() string { return proto.CompactTextString(m) }
func (*VolumeStatisticsApi) ProtoMessage()    {}
func (*VolumeStatisticsApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c360bfa0295e261, []int{2}
}

func (m *VolumeStatisticsApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeStatisticsApi.Unmarshal(m, b)
}
func (m *VolumeStatisticsApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeStatisticsApi.Marshal(b, m, deterministic)
}
func (m *VolumeStatisticsApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeStatisticsApi.Merge(m, src)
}
func (m *VolumeStatisticsApi) XXX_Size() int {
	return xxx_messageInfo_VolumeStatisticsApi.Size(m)
}
func (m *VolumeStatisticsApi) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeStatisticsApi.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeStatisticsApi proto.InternalMessageInfo

func (m *VolumeStatisticsApi) GetLogicalUsedStorage() uint64 {
	if m != nil {
		return m.LogicalUsedStorage
	}
	return 0
}

func (m *VolumeStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if m != nil {
		return m.PhysicalUsedStorage
	}
	return 0
}

func (m *VolumeStatisticsApi) GetCompressionRatio() float64 {
	if m != nil {
		return m.CompressionRatio
	}
	return 0
}

func (m *VolumeStatisticsApi) GetTotalCompressionRatio() float64 {
	if m != nil {
		return m.TotalCompressionRatio
	}
	return 0
}

func (m *VolumeStatisticsApi) GetPhysicalCapacity() uint64 {
	if m != nil {
		return m.PhysicalCapacity
	}
	return 0
}

func (m *VolumeStatisticsApi) GetPhysicalOwnedCapacity() uint64 {
	if m != nil {
		return m.PhysicalOwnedCapacity
	}
	return 0
}

func (m *VolumeStatisticsApi) GetPhysicalOwnedMemory() uint64 {
	if m != nil {
		return m.PhysicalOwnedMemory
	}
	return 0
}

func (m *VolumeStatisticsApi) GetPhysicalMemory() uint64 {
	if m != nil {
		return m.PhysicalMemory
	}
	return 0
}

func (m *VolumeStatisticsApi) GetUserWritten() uint64 {
	if m != nil {
		return m.UserWritten
	}
	return 0
}

type SnapshotStatisticsApi struct {
	// PhysicalCapacity
	//
	// The physical capacity that exists in this volume layer
	PhysicalCapacity uint64 `protobuf:"varint,1,opt,name=physicalCapacity,proto3" json:"physicalCapacity,omitempty"`
	// Physical Owned storage Capacity
	//
	// The capacity that would be freed when snapshot would be deleted
	PhysicalOwnedCapacity uint64 `protobuf:"varint,2,opt,name=physicalOwnedCapacity,proto3" json:"physicalOwnedCapacity,omitempty"`
	// Physical Owned Memory
	//
	// The number, in bytes, of md ranges multiplied by the size of md range
	PhysicalOwnedMemory uint64 `protobuf:"varint,3,opt,name=physicalOwnedMemory,proto3" json:"physicalOwnedMemory,omitempty"`
	// Physical Memory
	//
	// Memory used by this MSVV (how many chunks)
	PhysicalMemory uint64 `protobuf:"varint,4,opt,name=physicalMemory,proto3" json:"physicalMemory,omitempty"`
	// User Written
	//
	// Amount, in bytes of data requested to be written by the user
	UserWritten          uint64   `protobuf:"varint,5,opt,name=userWritten,proto3" json:"userWritten,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotStatisticsApi) Reset()         { *m = SnapshotStatisticsApi{} }
func (m *SnapshotStatisticsApi) String() string { return proto.CompactTextString(m) }
func (*SnapshotStatisticsApi) ProtoMessage()    {}
func (*SnapshotStatisticsApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c360bfa0295e261, []int{3}
}

func (m *SnapshotStatisticsApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotStatisticsApi.Unmarshal(m, b)
}
func (m *SnapshotStatisticsApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotStatisticsApi.Marshal(b, m, deterministic)
}
func (m *SnapshotStatisticsApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotStatisticsApi.Merge(m, src)
}
func (m *SnapshotStatisticsApi) XXX_Size() int {
	return xxx_messageInfo_SnapshotStatisticsApi.Size(m)
}
func (m *SnapshotStatisticsApi) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotStatisticsApi.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotStatisticsApi proto.InternalMessageInfo

func (m *SnapshotStatisticsApi) GetPhysicalCapacity() uint64 {
	if m != nil {
		return m.PhysicalCapacity
	}
	return 0
}

func (m *SnapshotStatisticsApi) GetPhysicalOwnedCapacity() uint64 {
	if m != nil {
		return m.PhysicalOwnedCapacity
	}
	return 0
}

func (m *SnapshotStatisticsApi) GetPhysicalOwnedMemory() uint64 {
	if m != nil {
		return m.PhysicalOwnedMemory
	}
	return 0
}

func (m *SnapshotStatisticsApi) GetPhysicalMemory() uint64 {
	if m != nil {
		return m.PhysicalMemory
	}
	return 0
}

func (m *SnapshotStatisticsApi) GetUserWritten() uint64 {
	if m != nil {
		return m.UserWritten
	}
	return 0
}

func init() {
	proto.RegisterType((*ClusterStatisticsApi)(nil), "lightbits.api.duros.v2.ClusterStatisticsApi")
	proto.RegisterType((*NodeStatisticsApi)(nil), "lightbits.api.duros.v2.NodeStatisticsApi")
	proto.RegisterType((*VolumeStatisticsApi)(nil), "lightbits.api.duros.v2.VolumeStatisticsApi")
	proto.RegisterType((*SnapshotStatisticsApi)(nil), "lightbits.api.duros.v2.SnapshotStatisticsApi")
}

func init() { proto.RegisterFile("api-service/statisticsapiv2.proto", fileDescriptor_6c360bfa0295e261) }

var fileDescriptor_6c360bfa0295e261 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0x9b, 0x76, 0x77, 0x67, 0x41, 0xdd, 0x59, 0x77, 0x2d, 0x78, 0xa9, 0x3d, 0xc8,
	0x22, 0x18, 0xa5, 0x8a, 0x88, 0x5e, 0xd4, 0x82, 0x20, 0xe8, 0xba, 0xb4, 0xa8, 0xe0, 0x6d, 0x9a,
	0xbc, 0xa6, 0x03, 0x49, 0x66, 0x98, 0x79, 0x89, 0xec, 0x5f, 0xe6, 0xc1, 0xbf, 0xcb, 0x8b, 0x27,
	0xc9, 0xa4, 0x29, 0x6d, 0x32, 0x59, 0x36, 0xed, 0xa9, 0xf0, 0x7d, 0xef, 0xeb, 0x7b, 0x2f, 0xef,
	0xd7, 0x86, 0x3c, 0x62, 0x92, 0x3f, 0xd5, 0xa0, 0x32, 0xee, 0xc3, 0x33, 0x8d, 0x0c, 0xb9, 0x46,
	0xee, 0x6b, 0x26, 0x79, 0x36, 0xf6, 0xa4, 0x12, 0x28, 0xe8, 0x79, 0xc4, 0xc3, 0x25, 0xce, 0x39,
	0x6a, 0x8f, 0x49, 0xee, 0x05, 0xa9, 0x12, 0xda, 0xcb, 0xc6, 0xa3, 0x7f, 0x2e, 0xb9, 0x3f, 0x89,
	0x52, 0x8d, 0xa0, 0x66, 0xeb, 0xe0, 0x7b, 0xc9, 0xe9, 0x1b, 0x32, 0xe0, 0x89, 0x46, 0x16, 0x45,
	0x10, 0x5c, 0x2d, 0xaf, 0x35, 0xf7, 0x59, 0x34, 0x43, 0xa1, 0x58, 0x08, 0x03, 0x67, 0xe8, 0x5c,
	0xb8, 0xd3, 0x46, 0x9f, 0xbe, 0x22, 0xe7, 0x31, 0x4b, 0x58, 0x58, 0x4f, 0x76, 0x4c, 0xb2, 0xc1,
	0xcd, 0x7b, 0xc2, 0x62, 0x01, 0x3e, 0xf2, 0x0c, 0xaa, 0xc9, 0x6e, 0xd1, 0xb3, 0xc9, 0xa7, 0x8f,
	0xc9, 0x9d, 0x48, 0x84, 0x9b, 0x09, 0xd7, 0x24, 0x2a, 0x2a, 0xf5, 0x08, 0x5d, 0x29, 0xdf, 0x34,
	0x04, 0x65, 0x6d, 0xcf, 0xd4, 0x5a, 0x1c, 0xfa, 0x9c, 0x9c, 0xca, 0x55, 0xab, 0xcd, 0x40, 0xdf,
	0x04, 0x6c, 0x16, 0xbd, 0x24, 0x23, 0x8b, 0xfc, 0x29, 0xf1, 0xa3, 0x34, 0xe0, 0x49, 0x78, 0xc5,
	0x14, 0xc7, 0xeb, 0xc1, 0x81, 0xf9, 0x82, 0x5b, 0x54, 0xe6, 0x13, 0x2c, 0x14, 0xd4, 0x1e, 0xc8,
	0x61, 0x31, 0x81, 0xc5, 0xa2, 0xef, 0xc8, 0x43, 0xd0, 0xc8, 0x63, 0x86, 0x10, 0x7c, 0x54, 0x00,
	0x9f, 0xb7, 0x1f, 0xcc, 0x91, 0x49, 0xde, 0x54, 0x42, 0x5f, 0x93, 0x07, 0x6b, 0xbb, 0x92, 0x26,
	0x26, 0xdd, 0x64, 0xd3, 0x27, 0xe4, 0x9e, 0x2f, 0x62, 0xa9, 0x40, 0x6b, 0x2e, 0x92, 0x29, 0x43,
	0x2e, 0x06, 0xc7, 0x43, 0xe7, 0xc2, 0x99, 0xd6, 0xf4, 0xd1, 0x1f, 0x97, 0x9c, 0x5c, 0x8a, 0x00,
	0xb6, 0xc9, 0x6b, 0xa6, 0xc7, 0xd9, 0x99, 0x9e, 0x4e, 0x6b, 0x7a, 0xba, 0x2d, 0xe8, 0x71, 0xdb,
	0xd2, 0xd3, 0xdb, 0x97, 0x9e, 0xfe, 0xbe, 0xf4, 0x1c, 0xec, 0x4c, 0xcf, 0xe1, 0x5e, 0xf4, 0x1c,
	0xb5, 0xa7, 0x87, 0x34, 0xd0, 0xf3, 0xbb, 0x4b, 0x4e, 0xbf, 0x8b, 0x28, 0x8d, 0x2b, 0xfc, 0xd8,
	0x6f, 0xe4, 0xb4, 0xbd, 0x51, 0xa7, 0xf9, 0x46, 0xb6, 0x29, 0xbb, 0xf6, 0x29, 0xe9, 0x4b, 0x72,
	0x86, 0x02, 0x59, 0x34, 0xa9, 0x06, 0x5c, 0x13, 0xb0, 0x9b, 0x79, 0x87, 0xb2, 0xf1, 0x84, 0x49,
	0xe6, 0xe7, 0x37, 0x2f, 0xa0, 0xa9, 0xe9, 0x79, 0x87, 0x52, 0xfb, 0xfa, 0x2b, 0x81, 0x60, 0x1d,
	0x28, 0x20, 0xb1, 0x9b, 0x9b, 0x5b, 0x1b, 0xe3, 0x0b, 0xc4, 0x42, 0x95, 0x7f, 0x4b, 0x36, 0x2b,
	0xff, 0x8d, 0x94, 0xf2, 0xaa, 0xb8, 0x40, 0xa1, 0xa2, 0xd2, 0x21, 0x39, 0x4e, 0x35, 0xa8, 0x1f,
	0x8a, 0x23, 0x42, 0xb2, 0xba, 0xf8, 0xa6, 0x34, 0xfa, 0xeb, 0x90, 0xb3, 0x59, 0xc2, 0xa4, 0x5e,
	0x0a, 0xdc, 0xbe, 0x9d, 0x6d, 0x6f, 0xa7, 0xed, 0xde, 0x9d, 0x1d, 0xf6, 0xee, 0xb6, 0xd9, 0xdb,
	0xbd, 0xcd, 0xde, 0xbd, 0xda, 0xde, 0x1f, 0x4e, 0x7e, 0xde, 0x35, 0x2f, 0xde, 0x6c, 0xfc, 0xd6,
	0x7c, 0xca, 0xf9, 0xbc, 0x6f, 0x5e, 0xcf, 0x2f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x2c,
	0xe1, 0xb6, 0xc3, 0x07, 0x00, 0x00,
}
