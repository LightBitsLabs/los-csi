syntax = "proto3";

package lightbits.api.volume.v1;

option go_package = "github.com/lightbitslabs/lightbits-api/gen/golang/common_apis;common_apis";

import "protoc-gen-swagger/options/annotations.proto";
import "common_apis/nullable_types.proto";
import "common_apis/typemeta.proto";
import "common_apis/events.proto";


message DurosVolume {
    enum ProtocolEnum {
        ProtocolTCP = 0;
    }
    // UUID of the namespace
    //
    // Should be used as uuid for nvme namespace
    string UUID = 1;
    // uuid of the protection group this volume belongs to.
    string protectionGroupID = 2;
    uint32 nsid = 3;
    uint32 NSIDVersion = 10;
    StringList acl = 4;
    bool compression = 5;
    ProtocolEnum protocol = 6;
    // capacity in bytes
    uint64 size = 7;
    string Name = 8;
    string RebuildProgress = 9;
    StringList IPAcl = 11;
}

enum ProtectionStateEnum {
    Unknown = 0;
    FullyProtected = 1;
    Degraded = 2;
    ReadOnly = 3;
    NotAvailable = 4;
}

message Host {
    TypeMeta typeMeta = 1;
    string hostNQN = 2;
    string address = 3;
    string hostname = 4;
    repeated string volumes = 5;
}

message Volume {
    TypeMeta typeMeta = 1;
    enum StateEnum {
        Unknown = 0;
        Creating = 1;
        Created = 2;
        Deleting = 3;
        Deleted = 4;
        Failed = 7;
        Updating = 8;
    }
    StateEnum state = 2;
    DurosVolume durosVolume = 3;
    // user requirement for placing this volume in the correct PG.
    //
    // the user will specify the replicas count for
    uint32 replicaCount = 4;
    // Minimum replication before this volume turns to read only.
    //
    // case the volume is replicated
    uint32 minimumReplicasCount = 5;

    // Peer list storing the volume
    repeated string nodeList = 6;
}

message VolumeState {
    TypeMeta typeMeta = 1;
    Volume.StateEnum state = 2;
}

message VolumeCreated {
    Volume volume = 1;
}

// This structure is the internal represtnation that cluster manager will in
// produced by the api-service for the cluster-manager to process.
message NodeCreateVolumeCommand {
    TypeMeta typeMeta = 1;
    // Command ID for tracability and debug
    string UUID = 2;
    // Aggregation of events that CM recieve about this command.
    repeated Event Events = 3;
    // A copy of the volume that
    Volume volume = 4;
    string name = 5;
}

message ClusterVolume {
    enum VolumeState {
        Active = 0;
        Deleting = 1;
    }

    TypeMeta typeMeta = 1;
    string UUID = 2;
    uint32 NSID = 3;
    string ProtectionGroupUUID = 4;
    StringList ACL = 5;
    StringList IPACL = 6;
    bool Compression = 7;
    // Capacity of the volume in bytes
    uint64 Size = 8;
    string Name = 9;
    // Number of changes applied to the volume. Basically the same idea as
    // version of Protection Group.
    uint64 Version = 10;
    VolumeState State = 11;
    uint32 NSIDVersion = 12;
}

message NodeVolume {
    TypeMeta typeMeta = 1;
    string UUID = 2;
    string NodeUUID = 3;
    // Number of changes applied to the volume by Node Manager
    uint64 Version = 4;
}
