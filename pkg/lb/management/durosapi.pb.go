// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api-service/durosapi.proto

package durospb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	common_apis "github.com/lightbitslabs/lb-csi/pkg/lb/management/common_apis"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProtectionStateEnum int32

const (
	ProtectionStateEnum_Unknown        ProtectionStateEnum = 0
	ProtectionStateEnum_FullyProtected ProtectionStateEnum = 1
	ProtectionStateEnum_Degraded       ProtectionStateEnum = 2
	ProtectionStateEnum_ReadOnly       ProtectionStateEnum = 3
	ProtectionStateEnum_NotAvailable   ProtectionStateEnum = 4
)

var ProtectionStateEnum_name = map[int32]string{
	0: "Unknown",
	1: "FullyProtected",
	2: "Degraded",
	3: "ReadOnly",
	4: "NotAvailable",
}

var ProtectionStateEnum_value = map[string]int32{
	"Unknown":        0,
	"FullyProtected": 1,
	"Degraded":       2,
	"ReadOnly":       3,
	"NotAvailable":   4,
}

func (x ProtectionStateEnum) String() string {
	return proto.EnumName(ProtectionStateEnum_name, int32(x))
}

func (ProtectionStateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{0}
}

type UserNvmeDevicesResponse_StateEnum int32

const (
	UserNvmeDevicesResponse_None       UserNvmeDevicesResponse_StateEnum = 0
	UserNvmeDevicesResponse_Healthy    UserNvmeDevicesResponse_StateEnum = 1
	UserNvmeDevicesResponse_Adding     UserNvmeDevicesResponse_StateEnum = 2
	UserNvmeDevicesResponse_Rebuilding UserNvmeDevicesResponse_StateEnum = 3
	UserNvmeDevicesResponse_Failed     UserNvmeDevicesResponse_StateEnum = 4
)

var UserNvmeDevicesResponse_StateEnum_name = map[int32]string{
	0: "None",
	1: "Healthy",
	2: "Adding",
	3: "Rebuilding",
	4: "Failed",
}

var UserNvmeDevicesResponse_StateEnum_value = map[string]int32{
	"None":       0,
	"Healthy":    1,
	"Adding":     2,
	"Rebuilding": 3,
	"Failed":     4,
}

func (x UserNvmeDevicesResponse_StateEnum) String() string {
	return proto.EnumName(UserNvmeDevicesResponse_StateEnum_name, int32(x))
}

func (UserNvmeDevicesResponse_StateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{23, 0}
}

type DurosNodeInfo_ClusterManagerMode int32

const (
	// node is is coming up
	DurosNodeInfo_ActiveMode DurosNodeInfo_ClusterManagerMode = 0
	// node is ready for serving data traffic
	DurosNodeInfo_PassiveMode DurosNodeInfo_ClusterManagerMode = 1
)

var DurosNodeInfo_ClusterManagerMode_name = map[int32]string{
	0: "ActiveMode",
	1: "PassiveMode",
}

var DurosNodeInfo_ClusterManagerMode_value = map[string]int32{
	"ActiveMode":  0,
	"PassiveMode": 1,
}

func (x DurosNodeInfo_ClusterManagerMode) String() string {
	return proto.EnumName(DurosNodeInfo_ClusterManagerMode_name, int32(x))
}

func (DurosNodeInfo_ClusterManagerMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{24, 0}
}

type DurosNodeInfo_State int32

const (
	// reserved value, default should return error, rather than a true  state that is incorrect
	DurosNodeInfo_Unknown DurosNodeInfo_State = 0
	// node is completed join cluster flow
	DurosNodeInfo_Active DurosNodeInfo_State = 1
	// node is is the process of coming up (startign required services) and joining cluster
	DurosNodeInfo_Activating DurosNodeInfo_State = 2
	// node is is Inactive (this includes internal states Removing and failed)
	DurosNodeInfo_Inactive DurosNodeInfo_State = 3
	// node is not attched to cluster (none of cluster pgs contain this pg)
	DurosNodeInfo_Unattached DurosNodeInfo_State = 4
	// Attaching node to cluster ongoing (replacing old node in pgs with this node)
	DurosNodeInfo_Attaching DurosNodeInfo_State = 6
	// Detaching node from cluster ongoing (replacing this node in pgs with this a new node)
	DurosNodeInfo_Detaching DurosNodeInfo_State = 7
)

var DurosNodeInfo_State_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Activating",
	3: "Inactive",
	4: "Unattached",
	6: "Attaching",
	7: "Detaching",
}

var DurosNodeInfo_State_value = map[string]int32{
	"Unknown":    0,
	"Active":     1,
	"Activating": 2,
	"Inactive":   3,
	"Unattached": 4,
	"Attaching":  6,
	"Detaching":  7,
}

func (x DurosNodeInfo_State) String() string {
	return proto.EnumName(DurosNodeInfo_State_name, int32(x))
}

func (DurosNodeInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{24, 1}
}

type ClusterHealth_State int32

const (
	ClusterHealth_None    ClusterHealth_State = 0
	ClusterHealth_OK      ClusterHealth_State = 1
	ClusterHealth_Warning ClusterHealth_State = 2
	ClusterHealth_Error   ClusterHealth_State = 3
)

var ClusterHealth_State_name = map[int32]string{
	0: "None",
	1: "OK",
	2: "Warning",
	3: "Error",
}

var ClusterHealth_State_value = map[string]int32{
	"None":    0,
	"OK":      1,
	"Warning": 2,
	"Error":   3,
}

func (x ClusterHealth_State) String() string {
	return proto.EnumName(ClusterHealth_State_name, int32(x))
}

func (ClusterHealth_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{39, 0}
}

type Volume_StateEnum int32

const (
	Volume_Unknown   Volume_StateEnum = 0
	Volume_Creating  Volume_StateEnum = 1
	Volume_Available Volume_StateEnum = 2
	Volume_Deleting  Volume_StateEnum = 3
	Volume_Deleted   Volume_StateEnum = 4
	Volume_Failed    Volume_StateEnum = 7
	Volume_Updating  Volume_StateEnum = 8
)

var Volume_StateEnum_name = map[int32]string{
	0: "Unknown",
	1: "Creating",
	2: "Available",
	3: "Deleting",
	4: "Deleted",
	7: "Failed",
	8: "Updating",
}

var Volume_StateEnum_value = map[string]int32{
	"Unknown":   0,
	"Creating":  1,
	"Available": 2,
	"Deleting":  3,
	"Deleted":   4,
	"Failed":    7,
	"Updating":  8,
}

func (x Volume_StateEnum) String() string {
	return proto.EnumName(Volume_StateEnum_name, int32(x))
}

func (Volume_StateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{40, 0}
}

type Volume_ProtocolEnum int32

const (
	Volume_ProtocolTCP Volume_ProtocolEnum = 0
)

var Volume_ProtocolEnum_name = map[int32]string{
	0: "ProtocolTCP",
}

var Volume_ProtocolEnum_value = map[string]int32{
	"ProtocolTCP": 0,
}

func (x Volume_ProtocolEnum) String() string {
	return proto.EnumName(Volume_ProtocolEnum_name, int32(x))
}

func (Volume_ProtocolEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{40, 1}
}

type Server_UpgradeStatusEnum int32

const (
	Server_Unknown   Server_UpgradeStatusEnum = 0
	Server_None      Server_UpgradeStatusEnum = 1
	Server_Failed    Server_UpgradeStatusEnum = 2
	Server_Upgrading Server_UpgradeStatusEnum = 3
	Server_Rebooting Server_UpgradeStatusEnum = 4
)

var Server_UpgradeStatusEnum_name = map[int32]string{
	0: "Unknown",
	1: "None",
	2: "Failed",
	3: "Upgrading",
	4: "Rebooting",
}

var Server_UpgradeStatusEnum_value = map[string]int32{
	"Unknown":   0,
	"None":      1,
	"Failed":    2,
	"Upgrading": 3,
	"Rebooting": 4,
}

func (x Server_UpgradeStatusEnum) String() string {
	return proto.EnumName(Server_UpgradeStatusEnum_name, int32(x))
}

func (Server_UpgradeStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{41, 0}
}

type CreateVolumeRequest struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 string                  `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Acl                  *common_apis.StringList `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
	Compression          string                  `protobuf:"bytes,4,opt,name=compression,proto3" json:"compression,omitempty"`
	ReplicaCount         uint32                  `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	IPAcl                *common_apis.StringList `protobuf:"bytes,6,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	MinReplicas          uint32                  `protobuf:"varint,7,opt,name=minReplicas,proto3" json:"minReplicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateVolumeRequest) Reset()         { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()    {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{0}
}

func (m *CreateVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeRequest.Unmarshal(m, b)
}
func (m *CreateVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeRequest.Marshal(b, m, deterministic)
}
func (m *CreateVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeRequest.Merge(m, src)
}
func (m *CreateVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeRequest.Size(m)
}
func (m *CreateVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeRequest proto.InternalMessageInfo

func (m *CreateVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeRequest) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *CreateVolumeRequest) GetAcl() *common_apis.StringList {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *CreateVolumeRequest) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

func (m *CreateVolumeRequest) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *CreateVolumeRequest) GetIPAcl() *common_apis.StringList {
	if m != nil {
		return m.IPAcl
	}
	return nil
}

func (m *CreateVolumeRequest) GetMinReplicas() uint32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

type DeleteVolumeRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()         { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()    {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{1}
}

func (m *DeleteVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeRequest.Merge(m, src)
}
func (m *DeleteVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeRequest.Size(m)
}
func (m *DeleteVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeRequest proto.InternalMessageInfo

func (m *DeleteVolumeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeleteVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddServerRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddServerRequest) Reset()         { *m = AddServerRequest{} }
func (m *AddServerRequest) String() string { return proto.CompactTextString(m) }
func (*AddServerRequest) ProtoMessage()    {}
func (*AddServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{2}
}

func (m *AddServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddServerRequest.Unmarshal(m, b)
}
func (m *AddServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddServerRequest.Marshal(b, m, deterministic)
}
func (m *AddServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddServerRequest.Merge(m, src)
}
func (m *AddServerRequest) XXX_Size() int {
	return xxx_messageInfo_AddServerRequest.Size(m)
}
func (m *AddServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddServerRequest proto.InternalMessageInfo

func (m *AddServerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type RemoveServerRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveServerRequest) Reset()         { *m = RemoveServerRequest{} }
func (m *RemoveServerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveServerRequest) ProtoMessage()    {}
func (*RemoveServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{3}
}

func (m *RemoveServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveServerRequest.Unmarshal(m, b)
}
func (m *RemoveServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveServerRequest.Marshal(b, m, deterministic)
}
func (m *RemoveServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServerRequest.Merge(m, src)
}
func (m *RemoveServerRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveServerRequest.Size(m)
}
func (m *RemoveServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServerRequest proto.InternalMessageInfo

func (m *RemoveServerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type DeleteServerRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServerRequest) Reset()         { *m = DeleteServerRequest{} }
func (m *DeleteServerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServerRequest) ProtoMessage()    {}
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{4}
}

func (m *DeleteServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServerRequest.Unmarshal(m, b)
}
func (m *DeleteServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServerRequest.Merge(m, src)
}
func (m *DeleteServerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteServerRequest.Size(m)
}
func (m *DeleteServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServerRequest proto.InternalMessageInfo

func (m *DeleteServerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type ReplaceNodeRequest struct {
	SrcNodeUUID          string   `protobuf:"bytes,1,opt,name=SrcNodeUUID,proto3" json:"SrcNodeUUID,omitempty"`
	TargetNodeUUID       string   `protobuf:"bytes,2,opt,name=TargetNodeUUID,proto3" json:"TargetNodeUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplaceNodeRequest) Reset()         { *m = ReplaceNodeRequest{} }
func (m *ReplaceNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceNodeRequest) ProtoMessage()    {}
func (*ReplaceNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{5}
}

func (m *ReplaceNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceNodeRequest.Unmarshal(m, b)
}
func (m *ReplaceNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceNodeRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceNodeRequest.Merge(m, src)
}
func (m *ReplaceNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceNodeRequest.Size(m)
}
func (m *ReplaceNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceNodeRequest proto.InternalMessageInfo

func (m *ReplaceNodeRequest) GetSrcNodeUUID() string {
	if m != nil {
		return m.SrcNodeUUID
	}
	return ""
}

func (m *ReplaceNodeRequest) GetTargetNodeUUID() string {
	if m != nil {
		return m.TargetNodeUUID
	}
	return ""
}

type CreateServerRequest struct {
	ServerEndpoints      []string `protobuf:"bytes,1,rep,name=serverEndpoints,proto3" json:"serverEndpoints,omitempty"`
	ServerUUID           string   `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	ReuseIP              bool     `protobuf:"varint,3,opt,name=reuseIP,proto3" json:"reuseIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateServerRequest) Reset()         { *m = CreateServerRequest{} }
func (m *CreateServerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateServerRequest) ProtoMessage()    {}
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{6}
}

func (m *CreateServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateServerRequest.Unmarshal(m, b)
}
func (m *CreateServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateServerRequest.Marshal(b, m, deterministic)
}
func (m *CreateServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServerRequest.Merge(m, src)
}
func (m *CreateServerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateServerRequest.Size(m)
}
func (m *CreateServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServerRequest proto.InternalMessageInfo

func (m *CreateServerRequest) GetServerEndpoints() []string {
	if m != nil {
		return m.ServerEndpoints
	}
	return nil
}

func (m *CreateServerRequest) GetServerUUID() string {
	if m != nil {
		return m.ServerUUID
	}
	return ""
}

func (m *CreateServerRequest) GetReuseIP() bool {
	if m != nil {
		return m.ReuseIP
	}
	return false
}

type UpdateVolumeRequest struct {
	UUID                 string                  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Acl                  *common_apis.StringList `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
	IPAcl                *common_apis.StringList `protobuf:"bytes,3,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	Size                 string                  `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Compression          string                  `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpdateVolumeRequest) Reset()         { *m = UpdateVolumeRequest{} }
func (m *UpdateVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVolumeRequest) ProtoMessage()    {}
func (*UpdateVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{7}
}

func (m *UpdateVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVolumeRequest.Unmarshal(m, b)
}
func (m *UpdateVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVolumeRequest.Marshal(b, m, deterministic)
}
func (m *UpdateVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVolumeRequest.Merge(m, src)
}
func (m *UpdateVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateVolumeRequest.Size(m)
}
func (m *UpdateVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVolumeRequest proto.InternalMessageInfo

func (m *UpdateVolumeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *UpdateVolumeRequest) GetAcl() *common_apis.StringList {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *UpdateVolumeRequest) GetIPAcl() *common_apis.StringList {
	if m != nil {
		return m.IPAcl
	}
	return nil
}

func (m *UpdateVolumeRequest) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *UpdateVolumeRequest) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

type UpgradeServerRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	InstallPkgUri        string   `protobuf:"bytes,2,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	ForceUpgrade         bool     `protobuf:"varint,3,opt,name=ForceUpgrade,proto3" json:"ForceUpgrade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeServerRequest) Reset()         { *m = UpgradeServerRequest{} }
func (m *UpgradeServerRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeServerRequest) ProtoMessage()    {}
func (*UpgradeServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{8}
}

func (m *UpgradeServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeServerRequest.Unmarshal(m, b)
}
func (m *UpgradeServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeServerRequest.Marshal(b, m, deterministic)
}
func (m *UpgradeServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeServerRequest.Merge(m, src)
}
func (m *UpgradeServerRequest) XXX_Size() int {
	return xxx_messageInfo_UpgradeServerRequest.Size(m)
}
func (m *UpgradeServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeServerRequest proto.InternalMessageInfo

func (m *UpgradeServerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *UpgradeServerRequest) GetInstallPkgUri() string {
	if m != nil {
		return m.InstallPkgUri
	}
	return ""
}

func (m *UpgradeServerRequest) GetForceUpgrade() bool {
	if m != nil {
		return m.ForceUpgrade
	}
	return false
}

type UpgradeClusterRequest struct {
	InstallPkgUri        string   `protobuf:"bytes,1,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	UUIDs                []string `protobuf:"bytes,2,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeClusterRequest) Reset()         { *m = UpgradeClusterRequest{} }
func (m *UpgradeClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterRequest) ProtoMessage()    {}
func (*UpgradeClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{9}
}

func (m *UpgradeClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterRequest.Unmarshal(m, b)
}
func (m *UpgradeClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterRequest.Marshal(b, m, deterministic)
}
func (m *UpgradeClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterRequest.Merge(m, src)
}
func (m *UpgradeClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterRequest.Size(m)
}
func (m *UpgradeClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterRequest proto.InternalMessageInfo

func (m *UpgradeClusterRequest) GetInstallPkgUri() string {
	if m != nil {
		return m.InstallPkgUri
	}
	return ""
}

func (m *UpgradeClusterRequest) GetUUIDs() []string {
	if m != nil {
		return m.UUIDs
	}
	return nil
}

type AddNvmeDeviceRequest struct {
	SerialNumber         string   `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	NodeUUID             string   `protobuf:"bytes,2,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNvmeDeviceRequest) Reset()         { *m = AddNvmeDeviceRequest{} }
func (m *AddNvmeDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*AddNvmeDeviceRequest) ProtoMessage()    {}
func (*AddNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{10}
}

func (m *AddNvmeDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNvmeDeviceRequest.Unmarshal(m, b)
}
func (m *AddNvmeDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNvmeDeviceRequest.Marshal(b, m, deterministic)
}
func (m *AddNvmeDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNvmeDeviceRequest.Merge(m, src)
}
func (m *AddNvmeDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_AddNvmeDeviceRequest.Size(m)
}
func (m *AddNvmeDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNvmeDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNvmeDeviceRequest proto.InternalMessageInfo

func (m *AddNvmeDeviceRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *AddNvmeDeviceRequest) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

type ListTasksRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTasksRequest) Reset()         { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()    {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{11}
}

func (m *ListTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksRequest.Unmarshal(m, b)
}
func (m *ListTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksRequest.Merge(m, src)
}
func (m *ListTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListTasksRequest.Size(m)
}
func (m *ListTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksRequest proto.InternalMessageInfo

func (m *ListTasksRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type GetHostRequest struct {
	HostNQN              string   `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostRequest) Reset()         { *m = GetHostRequest{} }
func (m *GetHostRequest) String() string { return proto.CompactTextString(m) }
func (*GetHostRequest) ProtoMessage()    {}
func (*GetHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{12}
}

func (m *GetHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostRequest.Unmarshal(m, b)
}
func (m *GetHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostRequest.Marshal(b, m, deterministic)
}
func (m *GetHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostRequest.Merge(m, src)
}
func (m *GetHostRequest) XXX_Size() int {
	return xxx_messageInfo_GetHostRequest.Size(m)
}
func (m *GetHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostRequest proto.InternalMessageInfo

func (m *GetHostRequest) GetHostNQN() string {
	if m != nil {
		return m.HostNQN
	}
	return ""
}

type ListHostsRequest struct {
	HostNQN              string   `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	VolumeUUID           string   `protobuf:"bytes,2,opt,name=volumeUUID,proto3" json:"volumeUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHostsRequest) Reset()         { *m = ListHostsRequest{} }
func (m *ListHostsRequest) String() string { return proto.CompactTextString(m) }
func (*ListHostsRequest) ProtoMessage()    {}
func (*ListHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{13}
}

func (m *ListHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHostsRequest.Unmarshal(m, b)
}
func (m *ListHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHostsRequest.Marshal(b, m, deterministic)
}
func (m *ListHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHostsRequest.Merge(m, src)
}
func (m *ListHostsRequest) XXX_Size() int {
	return xxx_messageInfo_ListHostsRequest.Size(m)
}
func (m *ListHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHostsRequest proto.InternalMessageInfo

func (m *ListHostsRequest) GetHostNQN() string {
	if m != nil {
		return m.HostNQN
	}
	return ""
}

func (m *ListHostsRequest) GetVolumeUUID() string {
	if m != nil {
		return m.VolumeUUID
	}
	return ""
}

type ListHostsResponse struct {
	ConnectedHosts       []*ConnectedHost `protobuf:"bytes,1,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListHostsResponse) Reset()         { *m = ListHostsResponse{} }
func (m *ListHostsResponse) String() string { return proto.CompactTextString(m) }
func (*ListHostsResponse) ProtoMessage()    {}
func (*ListHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{14}
}

func (m *ListHostsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHostsResponse.Unmarshal(m, b)
}
func (m *ListHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHostsResponse.Marshal(b, m, deterministic)
}
func (m *ListHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHostsResponse.Merge(m, src)
}
func (m *ListHostsResponse) XXX_Size() int {
	return xxx_messageInfo_ListHostsResponse.Size(m)
}
func (m *ListHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHostsResponse proto.InternalMessageInfo

func (m *ListHostsResponse) GetConnectedHosts() []*ConnectedHost {
	if m != nil {
		return m.ConnectedHosts
	}
	return nil
}

type ListNodeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID                 string   `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	FailureDomain        string   `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNodeRequest) Reset()         { *m = ListNodeRequest{} }
func (m *ListNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ListNodeRequest) ProtoMessage()    {}
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{15}
}

func (m *ListNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodeRequest.Unmarshal(m, b)
}
func (m *ListNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodeRequest.Marshal(b, m, deterministic)
}
func (m *ListNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodeRequest.Merge(m, src)
}
func (m *ListNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ListNodeRequest.Size(m)
}
func (m *ListNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodeRequest proto.InternalMessageInfo

func (m *ListNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListNodeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ListNodeRequest) GetFailureDomain() string {
	if m != nil {
		return m.FailureDomain
	}
	return ""
}

type GetVolumeRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVolumeRequest) Reset()         { *m = GetVolumeRequest{} }
func (m *GetVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*GetVolumeRequest) ProtoMessage()    {}
func (*GetVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{16}
}

func (m *GetVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeRequest.Unmarshal(m, b)
}
func (m *GetVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeRequest.Marshal(b, m, deterministic)
}
func (m *GetVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeRequest.Merge(m, src)
}
func (m *GetVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_GetVolumeRequest.Size(m)
}
func (m *GetVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeRequest proto.InternalMessageInfo

func (m *GetVolumeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GetVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetNodeRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeRequest) Reset()         { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()    {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{17}
}

func (m *GetNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeRequest.Unmarshal(m, b)
}
func (m *GetNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeRequest.Merge(m, src)
}
func (m *GetNodeRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeRequest.Size(m)
}
func (m *GetNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeRequest proto.InternalMessageInfo

func (m *GetNodeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type ListVolumeRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FailureDomain        string   `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVolumeRequest) Reset()         { *m = ListVolumeRequest{} }
func (m *ListVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ListVolumeRequest) ProtoMessage()    {}
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{18}
}

func (m *ListVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumeRequest.Unmarshal(m, b)
}
func (m *ListVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ListVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumeRequest.Merge(m, src)
}
func (m *ListVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ListVolumeRequest.Size(m)
}
func (m *ListVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumeRequest proto.InternalMessageInfo

func (m *ListVolumeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ListVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListVolumeRequest) GetFailureDomain() string {
	if m != nil {
		return m.FailureDomain
	}
	return ""
}

type ListNvmeDevicesRequest struct {
	NodeUUID             string   `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	ServerUUID           string   `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNvmeDevicesRequest) Reset()         { *m = ListNvmeDevicesRequest{} }
func (m *ListNvmeDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNvmeDevicesRequest) ProtoMessage()    {}
func (*ListNvmeDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{19}
}

func (m *ListNvmeDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNvmeDevicesRequest.Unmarshal(m, b)
}
func (m *ListNvmeDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNvmeDevicesRequest.Marshal(b, m, deterministic)
}
func (m *ListNvmeDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNvmeDevicesRequest.Merge(m, src)
}
func (m *ListNvmeDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNvmeDevicesRequest.Size(m)
}
func (m *ListNvmeDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNvmeDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNvmeDevicesRequest proto.InternalMessageInfo

func (m *ListNvmeDevicesRequest) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *ListNvmeDevicesRequest) GetServerUUID() string {
	if m != nil {
		return m.ServerUUID
	}
	return ""
}

type GetNvmeDeviceRequest struct {
	Serial               string   `protobuf:"bytes,1,opt,name=Serial,proto3" json:"Serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNvmeDeviceRequest) Reset()         { *m = GetNvmeDeviceRequest{} }
func (m *GetNvmeDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*GetNvmeDeviceRequest) ProtoMessage()    {}
func (*GetNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{20}
}

func (m *GetNvmeDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNvmeDeviceRequest.Unmarshal(m, b)
}
func (m *GetNvmeDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNvmeDeviceRequest.Marshal(b, m, deterministic)
}
func (m *GetNvmeDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNvmeDeviceRequest.Merge(m, src)
}
func (m *GetNvmeDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_GetNvmeDeviceRequest.Size(m)
}
func (m *GetNvmeDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNvmeDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNvmeDeviceRequest proto.InternalMessageInfo

func (m *GetNvmeDeviceRequest) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

type ListNvmeDevicesResponse struct {
	NvmeDevices          []*UserNvmeDevicesResponse `protobuf:"bytes,1,rep,name=NvmeDevices,proto3" json:"NvmeDevices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ListNvmeDevicesResponse) Reset()         { *m = ListNvmeDevicesResponse{} }
func (m *ListNvmeDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNvmeDevicesResponse) ProtoMessage()    {}
func (*ListNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{21}
}

func (m *ListNvmeDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNvmeDevicesResponse.Unmarshal(m, b)
}
func (m *ListNvmeDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNvmeDevicesResponse.Marshal(b, m, deterministic)
}
func (m *ListNvmeDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNvmeDevicesResponse.Merge(m, src)
}
func (m *ListNvmeDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNvmeDevicesResponse.Size(m)
}
func (m *ListNvmeDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNvmeDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNvmeDevicesResponse proto.InternalMessageInfo

func (m *ListNvmeDevicesResponse) GetNvmeDevices() []*UserNvmeDevicesResponse {
	if m != nil {
		return m.NvmeDevices
	}
	return nil
}

type ConnectedHost struct {
	HostNQN              string   `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	IPAddress            string   `protobuf:"bytes,2,opt,name=iPAddress,proto3" json:"iPAddress,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VolumeUUIDs          []string `protobuf:"bytes,4,rep,name=volumeUUIDs,proto3" json:"volumeUUIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectedHost) Reset()         { *m = ConnectedHost{} }
func (m *ConnectedHost) String() string { return proto.CompactTextString(m) }
func (*ConnectedHost) ProtoMessage()    {}
func (*ConnectedHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{22}
}

func (m *ConnectedHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectedHost.Unmarshal(m, b)
}
func (m *ConnectedHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectedHost.Marshal(b, m, deterministic)
}
func (m *ConnectedHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectedHost.Merge(m, src)
}
func (m *ConnectedHost) XXX_Size() int {
	return xxx_messageInfo_ConnectedHost.Size(m)
}
func (m *ConnectedHost) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectedHost.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectedHost proto.InternalMessageInfo

func (m *ConnectedHost) GetHostNQN() string {
	if m != nil {
		return m.HostNQN
	}
	return ""
}

func (m *ConnectedHost) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *ConnectedHost) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ConnectedHost) GetVolumeUUIDs() []string {
	if m != nil {
		return m.VolumeUUIDs
	}
	return nil
}

type UserNvmeDevicesResponse struct {
	// Total capacity of the device in bytes
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The numa node ID this device is associated with
	NumaNodeID uint64 `protobuf:"varint,2,opt,name=numaNodeID,proto3" json:"numaNodeID,omitempty"`
	// model
	//
	// Model string of the device, if exists
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// serial
	//
	// Serial of the block device, if exists
	Serial string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty"`
	// server uuid
	//
	// The UUID of the server to which the block device is installed
	ServerUUID string `protobuf:"bytes,5,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// device state
	//
	// Describes the state of the device, unmanaged device state will be None
	State UserNvmeDevicesResponse_StateEnum `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.duros.v1.UserNvmeDevicesResponse_StateEnum" json:"state,omitempty"`
	// device time of failure
	//
	// Timestamp that will be updated in case the device have failed
	FailureTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=failureTime,proto3" json:"failureTime,omitempty"`
	// device rebuild completion time
	//
	// Timestamp that will be updated once gftl have completed
	// to rebuild all the data that the device had, and we are safe
	// for second failure
	RebuildCompletionTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=rebuildCompletionTime,proto3" json:"rebuildCompletionTime,omitempty"`
	// name
	//
	// Device name or address
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// node uuid that manages the device
	//
	// The UUID of the node that manages the device, empty string if the device is not managed
	NodeUUID             string   `protobuf:"bytes,12,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	ETag                 string   `protobuf:"bytes,13,opt,name=ETag,proto3" json:"ETag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserNvmeDevicesResponse) Reset()         { *m = UserNvmeDevicesResponse{} }
func (m *UserNvmeDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*UserNvmeDevicesResponse) ProtoMessage()    {}
func (*UserNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{23}
}

func (m *UserNvmeDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserNvmeDevicesResponse.Unmarshal(m, b)
}
func (m *UserNvmeDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserNvmeDevicesResponse.Marshal(b, m, deterministic)
}
func (m *UserNvmeDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserNvmeDevicesResponse.Merge(m, src)
}
func (m *UserNvmeDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_UserNvmeDevicesResponse.Size(m)
}
func (m *UserNvmeDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserNvmeDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserNvmeDevicesResponse proto.InternalMessageInfo

func (m *UserNvmeDevicesResponse) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UserNvmeDevicesResponse) GetNumaNodeID() uint64 {
	if m != nil {
		return m.NumaNodeID
	}
	return 0
}

func (m *UserNvmeDevicesResponse) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *UserNvmeDevicesResponse) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *UserNvmeDevicesResponse) GetServerUUID() string {
	if m != nil {
		return m.ServerUUID
	}
	return ""
}

func (m *UserNvmeDevicesResponse) GetState() UserNvmeDevicesResponse_StateEnum {
	if m != nil {
		return m.State
	}
	return UserNvmeDevicesResponse_None
}

func (m *UserNvmeDevicesResponse) GetFailureTime() *timestamp.Timestamp {
	if m != nil {
		return m.FailureTime
	}
	return nil
}

func (m *UserNvmeDevicesResponse) GetRebuildCompletionTime() *timestamp.Timestamp {
	if m != nil {
		return m.RebuildCompletionTime
	}
	return nil
}

func (m *UserNvmeDevicesResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserNvmeDevicesResponse) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *UserNvmeDevicesResponse) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

type DurosNodeInfo struct {
	Name   string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID   string                                          `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State  DurosNodeInfo_State                             `protobuf:"varint,3,opt,name=state,proto3,enum=lightbits.api.duros.v1.DurosNodeInfo_State" json:"state,omitempty"`
	Status common_apis.ClusterReportedNodeState_StatusEnum `protobuf:"varint,4,opt,name=status,proto3,enum=lightbits.api.ClusterReportedNodeState_StatusEnum" json:"status,omitempty"`
	// peer <ip>:<port> service datapath IP
	NvmeEndpoint         string                           `protobuf:"bytes,5,opt,name=nvmeEndpoint,proto3" json:"nvmeEndpoint,omitempty"`
	FailureDomains       []string                         `protobuf:"bytes,6,rep,name=failureDomains,proto3" json:"failureDomains,omitempty"`
	FailureInfo          string                           `protobuf:"bytes,7,opt,name=failureInfo,proto3" json:"failureInfo,omitempty"`
	ClusterManagerMode   DurosNodeInfo_ClusterManagerMode `protobuf:"varint,8,opt,name=clusterManagerMode,proto3,enum=lightbits.api.duros.v1.DurosNodeInfo_ClusterManagerMode" json:"clusterManagerMode,omitempty"`
	Hostname             string                           `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	InLocalRebuild       bool                             `protobuf:"varint,10,opt,name=inLocalRebuild,proto3" json:"inLocalRebuild,omitempty"`
	LocalRebuildProgress uint32                           `protobuf:"varint,11,opt,name=localRebuildProgress,proto3" json:"localRebuildProgress,omitempty"`
	NumManagedDevices    int32                            `protobuf:"varint,12,opt,name=numManagedDevices,proto3" json:"numManagedDevices,omitempty"`
	MaxNvmeDevices       uint32                           `protobuf:"varint,13,opt,name=maxNvmeDevices,proto3" json:"maxNvmeDevices,omitempty"`
	Ec                   bool                             `protobuf:"varint,14,opt,name=ec,proto3" json:"ec,omitempty"`
	Statistics           *NodeStatisticsApi               `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
	ServerUUID           string                           `protobuf:"bytes,16,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	ETag                 string                           `protobuf:"bytes,17,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ReadOnly             bool                             `protobuf:"varint,18,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *DurosNodeInfo) Reset()         { *m = DurosNodeInfo{} }
func (m *DurosNodeInfo) String() string { return proto.CompactTextString(m) }
func (*DurosNodeInfo) ProtoMessage()    {}
func (*DurosNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{24}
}

func (m *DurosNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DurosNodeInfo.Unmarshal(m, b)
}
func (m *DurosNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DurosNodeInfo.Marshal(b, m, deterministic)
}
func (m *DurosNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DurosNodeInfo.Merge(m, src)
}
func (m *DurosNodeInfo) XXX_Size() int {
	return xxx_messageInfo_DurosNodeInfo.Size(m)
}
func (m *DurosNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DurosNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DurosNodeInfo proto.InternalMessageInfo

func (m *DurosNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DurosNodeInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DurosNodeInfo) GetState() DurosNodeInfo_State {
	if m != nil {
		return m.State
	}
	return DurosNodeInfo_Unknown
}

func (m *DurosNodeInfo) GetStatus() common_apis.ClusterReportedNodeState_StatusEnum {
	if m != nil {
		return m.Status
	}
	return common_apis.ClusterReportedNodeState_NoStatus
}

func (m *DurosNodeInfo) GetNvmeEndpoint() string {
	if m != nil {
		return m.NvmeEndpoint
	}
	return ""
}

func (m *DurosNodeInfo) GetFailureDomains() []string {
	if m != nil {
		return m.FailureDomains
	}
	return nil
}

func (m *DurosNodeInfo) GetFailureInfo() string {
	if m != nil {
		return m.FailureInfo
	}
	return ""
}

func (m *DurosNodeInfo) GetClusterManagerMode() DurosNodeInfo_ClusterManagerMode {
	if m != nil {
		return m.ClusterManagerMode
	}
	return DurosNodeInfo_ActiveMode
}

func (m *DurosNodeInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DurosNodeInfo) GetInLocalRebuild() bool {
	if m != nil {
		return m.InLocalRebuild
	}
	return false
}

func (m *DurosNodeInfo) GetLocalRebuildProgress() uint32 {
	if m != nil {
		return m.LocalRebuildProgress
	}
	return 0
}

func (m *DurosNodeInfo) GetNumManagedDevices() int32 {
	if m != nil {
		return m.NumManagedDevices
	}
	return 0
}

func (m *DurosNodeInfo) GetMaxNvmeDevices() uint32 {
	if m != nil {
		return m.MaxNvmeDevices
	}
	return 0
}

func (m *DurosNodeInfo) GetEc() bool {
	if m != nil {
		return m.Ec
	}
	return false
}

func (m *DurosNodeInfo) GetStatistics() *NodeStatisticsApi {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *DurosNodeInfo) GetServerUUID() string {
	if m != nil {
		return m.ServerUUID
	}
	return ""
}

func (m *DurosNodeInfo) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *DurosNodeInfo) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type ListNodesResponse struct {
	Nodes                []*DurosNodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListNodesResponse) Reset()         { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()    {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{25}
}

func (m *ListNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodesResponse.Unmarshal(m, b)
}
func (m *ListNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodesResponse.Marshal(b, m, deterministic)
}
func (m *ListNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesResponse.Merge(m, src)
}
func (m *ListNodesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNodesResponse.Size(m)
}
func (m *ListNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesResponse proto.InternalMessageInfo

func (m *ListNodesResponse) GetNodes() []*DurosNodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type ListVolumesResponse struct {
	Volumes              []*Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListVolumesResponse) Reset()         { *m = ListVolumesResponse{} }
func (m *ListVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse) ProtoMessage()    {}
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{26}
}

func (m *ListVolumesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse.Unmarshal(m, b)
}
func (m *ListVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse.Merge(m, src)
}
func (m *ListVolumesResponse) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse.Size(m)
}
func (m *ListVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse proto.InternalMessageInfo

func (m *ListVolumesResponse) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type AddNvmeDeviceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNvmeDeviceResponse) Reset()         { *m = AddNvmeDeviceResponse{} }
func (m *AddNvmeDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*AddNvmeDeviceResponse) ProtoMessage()    {}
func (*AddNvmeDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{27}
}

func (m *AddNvmeDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNvmeDeviceResponse.Unmarshal(m, b)
}
func (m *AddNvmeDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNvmeDeviceResponse.Marshal(b, m, deterministic)
}
func (m *AddNvmeDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNvmeDeviceResponse.Merge(m, src)
}
func (m *AddNvmeDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_AddNvmeDeviceResponse.Size(m)
}
func (m *AddNvmeDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNvmeDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddNvmeDeviceResponse proto.InternalMessageInfo

type UpdateVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVolumeResponse) Reset()         { *m = UpdateVolumeResponse{} }
func (m *UpdateVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateVolumeResponse) ProtoMessage()    {}
func (*UpdateVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{28}
}

func (m *UpdateVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVolumeResponse.Unmarshal(m, b)
}
func (m *UpdateVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVolumeResponse.Marshal(b, m, deterministic)
}
func (m *UpdateVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVolumeResponse.Merge(m, src)
}
func (m *UpdateVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateVolumeResponse.Size(m)
}
func (m *UpdateVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVolumeResponse proto.InternalMessageInfo

type UpgradeServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeServerResponse) Reset()         { *m = UpgradeServerResponse{} }
func (m *UpgradeServerResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeServerResponse) ProtoMessage()    {}
func (*UpgradeServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{29}
}

func (m *UpgradeServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeServerResponse.Unmarshal(m, b)
}
func (m *UpgradeServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeServerResponse.Marshal(b, m, deterministic)
}
func (m *UpgradeServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeServerResponse.Merge(m, src)
}
func (m *UpgradeServerResponse) XXX_Size() int {
	return xxx_messageInfo_UpgradeServerResponse.Size(m)
}
func (m *UpgradeServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeServerResponse proto.InternalMessageInfo

type UpgradeClusterResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeClusterResponse) Reset()         { *m = UpgradeClusterResponse{} }
func (m *UpgradeClusterResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterResponse) ProtoMessage()    {}
func (*UpgradeClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{30}
}

func (m *UpgradeClusterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterResponse.Unmarshal(m, b)
}
func (m *UpgradeClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterResponse.Marshal(b, m, deterministic)
}
func (m *UpgradeClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterResponse.Merge(m, src)
}
func (m *UpgradeClusterResponse) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterResponse.Size(m)
}
func (m *UpgradeClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterResponse proto.InternalMessageInfo

type ReplaceNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplaceNodeResponse) Reset()         { *m = ReplaceNodeResponse{} }
func (m *ReplaceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ReplaceNodeResponse) ProtoMessage()    {}
func (*ReplaceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{31}
}

func (m *ReplaceNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceNodeResponse.Unmarshal(m, b)
}
func (m *ReplaceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceNodeResponse.Marshal(b, m, deterministic)
}
func (m *ReplaceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceNodeResponse.Merge(m, src)
}
func (m *ReplaceNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ReplaceNodeResponse.Size(m)
}
func (m *ReplaceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceNodeResponse proto.InternalMessageInfo

type DeleteServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServerResponse) Reset()         { *m = DeleteServerResponse{} }
func (m *DeleteServerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteServerResponse) ProtoMessage()    {}
func (*DeleteServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{32}
}

func (m *DeleteServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServerResponse.Unmarshal(m, b)
}
func (m *DeleteServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServerResponse.Marshal(b, m, deterministic)
}
func (m *DeleteServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServerResponse.Merge(m, src)
}
func (m *DeleteServerResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteServerResponse.Size(m)
}
func (m *DeleteServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServerResponse proto.InternalMessageInfo

type RemoveServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveServerResponse) Reset()         { *m = RemoveServerResponse{} }
func (m *RemoveServerResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveServerResponse) ProtoMessage()    {}
func (*RemoveServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{33}
}

func (m *RemoveServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveServerResponse.Unmarshal(m, b)
}
func (m *RemoveServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveServerResponse.Marshal(b, m, deterministic)
}
func (m *RemoveServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServerResponse.Merge(m, src)
}
func (m *RemoveServerResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveServerResponse.Size(m)
}
func (m *RemoveServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServerResponse proto.InternalMessageInfo

type ListServersRequest struct {
	UUID                 string                               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string                               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	UpgradeabilityState  common_apis.UpgradeabilityEnum_State `protobuf:"varint,3,opt,name=UpgradeabilityState,proto3,enum=lightbits.api.UpgradeabilityEnum_State" json:"UpgradeabilityState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ListServersRequest) Reset()         { *m = ListServersRequest{} }
func (m *ListServersRequest) String() string { return proto.CompactTextString(m) }
func (*ListServersRequest) ProtoMessage()    {}
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{34}
}

func (m *ListServersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServersRequest.Unmarshal(m, b)
}
func (m *ListServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServersRequest.Marshal(b, m, deterministic)
}
func (m *ListServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServersRequest.Merge(m, src)
}
func (m *ListServersRequest) XXX_Size() int {
	return xxx_messageInfo_ListServersRequest.Size(m)
}
func (m *ListServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServersRequest proto.InternalMessageInfo

func (m *ListServersRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ListServersRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListServersRequest) GetUpgradeabilityState() common_apis.UpgradeabilityEnum_State {
	if m != nil {
		return m.UpgradeabilityState
	}
	return common_apis.UpgradeabilityEnum_None
}

type GetServerRequest struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServerRequest) Reset()         { *m = GetServerRequest{} }
func (m *GetServerRequest) String() string { return proto.CompactTextString(m) }
func (*GetServerRequest) ProtoMessage()    {}
func (*GetServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{35}
}

func (m *GetServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServerRequest.Unmarshal(m, b)
}
func (m *GetServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServerRequest.Marshal(b, m, deterministic)
}
func (m *GetServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerRequest.Merge(m, src)
}
func (m *GetServerRequest) XXX_Size() int {
	return xxx_messageInfo_GetServerRequest.Size(m)
}
func (m *GetServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerRequest proto.InternalMessageInfo

func (m *GetServerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type ListServersResponse struct {
	Servers              []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListServersResponse) Reset()         { *m = ListServersResponse{} }
func (m *ListServersResponse) String() string { return proto.CompactTextString(m) }
func (*ListServersResponse) ProtoMessage()    {}
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{36}
}

func (m *ListServersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServersResponse.Unmarshal(m, b)
}
func (m *ListServersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServersResponse.Marshal(b, m, deterministic)
}
func (m *ListServersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServersResponse.Merge(m, src)
}
func (m *ListServersResponse) XXX_Size() int {
	return xxx_messageInfo_ListServersResponse.Size(m)
}
func (m *ListServersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServersResponse proto.InternalMessageInfo

func (m *ListServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type Version struct {
	// time of binary compilation.
	BuildDate string `protobuf:"bytes,1,opt,name=buildDate,proto3" json:"buildDate,omitempty"`
	// git commit short hash.
	CommitHash string `protobuf:"bytes,2,opt,name=commitHash,proto3" json:"commitHash,omitempty"`
	// semantic version of the binary.
	Version    string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ApiVersion string `protobuf:"bytes,4,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Internal hash calculated from all binary dependencies.
	LbVersion string `protobuf:"bytes,5,opt,name=lbVersion,proto3" json:"lbVersion,omitempty"`
	// go runtime version used to compile this binary.
	GoVersion            string   `protobuf:"bytes,6,opt,name=goVersion,proto3" json:"goVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{37}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *Version) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Version) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *Version) GetLbVersion() string {
	if m != nil {
		return m.LbVersion
	}
	return ""
}

func (m *Version) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

type ClusterInfo struct {
	UUID                 string                `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SubsystemNQN         string                `protobuf:"bytes,2,opt,name=subsystemNQN,proto3" json:"subsystemNQN,omitempty"`
	CurrentMaxReplicas   uint32                `protobuf:"varint,3,opt,name=currentMaxReplicas,proto3" json:"currentMaxReplicas,omitempty"`
	SupportedMaxReplicas uint32                `protobuf:"varint,4,opt,name=supportedMaxReplicas,proto3" json:"supportedMaxReplicas,omitempty"`
	Statistics           *ClusterStatisticsApi `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
	ETag                 string                `protobuf:"bytes,6,opt,name=ETag,proto3" json:"ETag,omitempty"`
	Health               *ClusterHealth        `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	MinVersionInCluster  string                `protobuf:"bytes,8,opt,name=MinVersionInCluster,proto3" json:"MinVersionInCluster,omitempty"`
	MinAllowedVersion    string                `protobuf:"bytes,9,opt,name=MinAllowedVersion,proto3" json:"MinAllowedVersion,omitempty"`
	MaxAllowedVersion    string                `protobuf:"bytes,10,opt,name=MaxAllowedVersion,proto3" json:"MaxAllowedVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{38}
}

func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterInfo.Unmarshal(m, b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterInfo.Size(m)
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ClusterInfo) GetSubsystemNQN() string {
	if m != nil {
		return m.SubsystemNQN
	}
	return ""
}

func (m *ClusterInfo) GetCurrentMaxReplicas() uint32 {
	if m != nil {
		return m.CurrentMaxReplicas
	}
	return 0
}

func (m *ClusterInfo) GetSupportedMaxReplicas() uint32 {
	if m != nil {
		return m.SupportedMaxReplicas
	}
	return 0
}

func (m *ClusterInfo) GetStatistics() *ClusterStatisticsApi {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *ClusterInfo) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *ClusterInfo) GetHealth() *ClusterHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *ClusterInfo) GetMinVersionInCluster() string {
	if m != nil {
		return m.MinVersionInCluster
	}
	return ""
}

func (m *ClusterInfo) GetMinAllowedVersion() string {
	if m != nil {
		return m.MinAllowedVersion
	}
	return ""
}

func (m *ClusterInfo) GetMaxAllowedVersion() string {
	if m != nil {
		return m.MaxAllowedVersion
	}
	return ""
}

type ClusterHealth struct {
	State                  ClusterHealth_State `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v1.ClusterHealth_State" json:"state,omitempty"`
	NumDegradedVolumes     uint32              `protobuf:"varint,2,opt,name=numDegradedVolumes,proto3" json:"numDegradedVolumes,omitempty"`
	NumReadOnlyVolumes     uint32              `protobuf:"varint,3,opt,name=numReadOnlyVolumes,proto3" json:"numReadOnlyVolumes,omitempty"`
	NumNotAvailableVolumes uint32              `protobuf:"varint,4,opt,name=numNotAvailableVolumes,proto3" json:"numNotAvailableVolumes,omitempty"`
	NumInactiveNodes       uint32              `protobuf:"varint,5,opt,name=numInactiveNodes,proto3" json:"numInactiveNodes,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}            `json:"-"`
	XXX_unrecognized       []byte              `json:"-"`
	XXX_sizecache          int32               `json:"-"`
}

func (m *ClusterHealth) Reset()         { *m = ClusterHealth{} }
func (m *ClusterHealth) String() string { return proto.CompactTextString(m) }
func (*ClusterHealth) ProtoMessage()    {}
func (*ClusterHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{39}
}

func (m *ClusterHealth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterHealth.Unmarshal(m, b)
}
func (m *ClusterHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterHealth.Marshal(b, m, deterministic)
}
func (m *ClusterHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterHealth.Merge(m, src)
}
func (m *ClusterHealth) XXX_Size() int {
	return xxx_messageInfo_ClusterHealth.Size(m)
}
func (m *ClusterHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterHealth.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterHealth proto.InternalMessageInfo

func (m *ClusterHealth) GetState() ClusterHealth_State {
	if m != nil {
		return m.State
	}
	return ClusterHealth_None
}

func (m *ClusterHealth) GetNumDegradedVolumes() uint32 {
	if m != nil {
		return m.NumDegradedVolumes
	}
	return 0
}

func (m *ClusterHealth) GetNumReadOnlyVolumes() uint32 {
	if m != nil {
		return m.NumReadOnlyVolumes
	}
	return 0
}

func (m *ClusterHealth) GetNumNotAvailableVolumes() uint32 {
	if m != nil {
		return m.NumNotAvailableVolumes
	}
	return 0
}

func (m *ClusterHealth) GetNumInactiveNodes() uint32 {
	if m != nil {
		return m.NumInactiveNodes
	}
	return 0
}

type Volume struct {
	State                Volume_StateEnum        `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v1.Volume_StateEnum" json:"state,omitempty"`
	ProtectionState      ProtectionStateEnum     `protobuf:"varint,2,opt,name=protectionState,proto3,enum=lightbits.api.duros.v1.ProtectionStateEnum" json:"protectionState,omitempty"`
	ReplicaCount         uint32                  `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	NodeList             []string                `protobuf:"bytes,4,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	UUID                 string                  `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Nsid                 uint32                  `protobuf:"varint,6,opt,name=nsid,proto3" json:"nsid,omitempty"`
	Acl                  *common_apis.StringList `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty"`
	Compression          string                  `protobuf:"bytes,8,opt,name=compression,proto3" json:"compression,omitempty"`
	Size                 uint64                  `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Name                 string                  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	RebuildProgress      string                  `protobuf:"bytes,11,opt,name=rebuildProgress,proto3" json:"rebuildProgress,omitempty"`
	Statistics           *VolumeStatisticsApi    `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
	IPAcl                *common_apis.StringList `protobuf:"bytes,13,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	ETag                 string                  `protobuf:"bytes,14,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ConnectedHosts       []string                `protobuf:"bytes,15,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{40}
}

func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetState() Volume_StateEnum {
	if m != nil {
		return m.State
	}
	return Volume_Unknown
}

func (m *Volume) GetProtectionState() ProtectionStateEnum {
	if m != nil {
		return m.ProtectionState
	}
	return ProtectionStateEnum_Unknown
}

func (m *Volume) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *Volume) GetNodeList() []string {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *Volume) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Volume) GetNsid() uint32 {
	if m != nil {
		return m.Nsid
	}
	return 0
}

func (m *Volume) GetAcl() *common_apis.StringList {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *Volume) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

func (m *Volume) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetRebuildProgress() string {
	if m != nil {
		return m.RebuildProgress
	}
	return ""
}

func (m *Volume) GetStatistics() *VolumeStatisticsApi {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Volume) GetIPAcl() *common_apis.StringList {
	if m != nil {
		return m.IPAcl
	}
	return nil
}

func (m *Volume) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *Volume) GetConnectedHosts() []string {
	if m != nil {
		return m.ConnectedHosts
	}
	return nil
}

// an entity representing a physical server in duros cluster
type Server struct {
	UUID string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// server friendly name
	Name                 string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UpgradeabilityState  common_apis.UpgradeabilityEnum_State `protobuf:"varint,4,opt,name=UpgradeabilityState,proto3,enum=lightbits.api.UpgradeabilityEnum_State" json:"UpgradeabilityState,omitempty"`
	NodesUUIDs           []string                             `protobuf:"bytes,5,rep,name=NodesUUIDs,proto3" json:"NodesUUIDs,omitempty"`
	State                common_apis.ServerStateEnum_State    `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.ServerStateEnum_State" json:"state,omitempty"`
	ServerEndpoints      []string                             `protobuf:"bytes,7,rep,name=ServerEndpoints,proto3" json:"ServerEndpoints,omitempty"`
	ETag                 string                               `protobuf:"bytes,8,opt,name=ETag,proto3" json:"ETag,omitempty"`
	LightOSVersion       string                               `protobuf:"bytes,9,opt,name=LightOSVersion,proto3" json:"LightOSVersion,omitempty"`
	UpgradeStatus        Server_UpgradeStatusEnum             `protobuf:"varint,10,opt,name=UpgradeStatus,proto3,enum=lightbits.api.duros.v1.Server_UpgradeStatusEnum" json:"UpgradeStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce45ba4fae0322ff, []int{41}
}

func (m *Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server.Unmarshal(m, b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server.Marshal(b, m, deterministic)
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return xxx_messageInfo_Server.Size(m)
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetUpgradeabilityState() common_apis.UpgradeabilityEnum_State {
	if m != nil {
		return m.UpgradeabilityState
	}
	return common_apis.UpgradeabilityEnum_None
}

func (m *Server) GetNodesUUIDs() []string {
	if m != nil {
		return m.NodesUUIDs
	}
	return nil
}

func (m *Server) GetState() common_apis.ServerStateEnum_State {
	if m != nil {
		return m.State
	}
	return common_apis.ServerStateEnum_Unknown
}

func (m *Server) GetServerEndpoints() []string {
	if m != nil {
		return m.ServerEndpoints
	}
	return nil
}

func (m *Server) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *Server) GetLightOSVersion() string {
	if m != nil {
		return m.LightOSVersion
	}
	return ""
}

func (m *Server) GetUpgradeStatus() Server_UpgradeStatusEnum {
	if m != nil {
		return m.UpgradeStatus
	}
	return Server_Unknown
}

func init() {
	proto.RegisterEnum("lightbits.api.duros.v1.ProtectionStateEnum", ProtectionStateEnum_name, ProtectionStateEnum_value)
	proto.RegisterEnum("lightbits.api.duros.v1.UserNvmeDevicesResponse_StateEnum", UserNvmeDevicesResponse_StateEnum_name, UserNvmeDevicesResponse_StateEnum_value)
	proto.RegisterEnum("lightbits.api.duros.v1.DurosNodeInfo_ClusterManagerMode", DurosNodeInfo_ClusterManagerMode_name, DurosNodeInfo_ClusterManagerMode_value)
	proto.RegisterEnum("lightbits.api.duros.v1.DurosNodeInfo_State", DurosNodeInfo_State_name, DurosNodeInfo_State_value)
	proto.RegisterEnum("lightbits.api.duros.v1.ClusterHealth_State", ClusterHealth_State_name, ClusterHealth_State_value)
	proto.RegisterEnum("lightbits.api.duros.v1.Volume_StateEnum", Volume_StateEnum_name, Volume_StateEnum_value)
	proto.RegisterEnum("lightbits.api.duros.v1.Volume_ProtocolEnum", Volume_ProtocolEnum_name, Volume_ProtocolEnum_value)
	proto.RegisterEnum("lightbits.api.duros.v1.Server_UpgradeStatusEnum", Server_UpgradeStatusEnum_name, Server_UpgradeStatusEnum_value)
	proto.RegisterType((*CreateVolumeRequest)(nil), "lightbits.api.duros.v1.CreateVolumeRequest")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "lightbits.api.duros.v1.DeleteVolumeRequest")
	proto.RegisterType((*AddServerRequest)(nil), "lightbits.api.duros.v1.AddServerRequest")
	proto.RegisterType((*RemoveServerRequest)(nil), "lightbits.api.duros.v1.RemoveServerRequest")
	proto.RegisterType((*DeleteServerRequest)(nil), "lightbits.api.duros.v1.DeleteServerRequest")
	proto.RegisterType((*ReplaceNodeRequest)(nil), "lightbits.api.duros.v1.ReplaceNodeRequest")
	proto.RegisterType((*CreateServerRequest)(nil), "lightbits.api.duros.v1.CreateServerRequest")
	proto.RegisterType((*UpdateVolumeRequest)(nil), "lightbits.api.duros.v1.UpdateVolumeRequest")
	proto.RegisterType((*UpgradeServerRequest)(nil), "lightbits.api.duros.v1.UpgradeServerRequest")
	proto.RegisterType((*UpgradeClusterRequest)(nil), "lightbits.api.duros.v1.UpgradeClusterRequest")
	proto.RegisterType((*AddNvmeDeviceRequest)(nil), "lightbits.api.duros.v1.AddNvmeDeviceRequest")
	proto.RegisterType((*ListTasksRequest)(nil), "lightbits.api.duros.v1.ListTasksRequest")
	proto.RegisterType((*GetHostRequest)(nil), "lightbits.api.duros.v1.GetHostRequest")
	proto.RegisterType((*ListHostsRequest)(nil), "lightbits.api.duros.v1.ListHostsRequest")
	proto.RegisterType((*ListHostsResponse)(nil), "lightbits.api.duros.v1.ListHostsResponse")
	proto.RegisterType((*ListNodeRequest)(nil), "lightbits.api.duros.v1.ListNodeRequest")
	proto.RegisterType((*GetVolumeRequest)(nil), "lightbits.api.duros.v1.GetVolumeRequest")
	proto.RegisterType((*GetNodeRequest)(nil), "lightbits.api.duros.v1.GetNodeRequest")
	proto.RegisterType((*ListVolumeRequest)(nil), "lightbits.api.duros.v1.ListVolumeRequest")
	proto.RegisterType((*ListNvmeDevicesRequest)(nil), "lightbits.api.duros.v1.ListNvmeDevicesRequest")
	proto.RegisterType((*GetNvmeDeviceRequest)(nil), "lightbits.api.duros.v1.GetNvmeDeviceRequest")
	proto.RegisterType((*ListNvmeDevicesResponse)(nil), "lightbits.api.duros.v1.ListNvmeDevicesResponse")
	proto.RegisterType((*ConnectedHost)(nil), "lightbits.api.duros.v1.ConnectedHost")
	proto.RegisterType((*UserNvmeDevicesResponse)(nil), "lightbits.api.duros.v1.UserNvmeDevicesResponse")
	proto.RegisterType((*DurosNodeInfo)(nil), "lightbits.api.duros.v1.DurosNodeInfo")
	proto.RegisterType((*ListNodesResponse)(nil), "lightbits.api.duros.v1.ListNodesResponse")
	proto.RegisterType((*ListVolumesResponse)(nil), "lightbits.api.duros.v1.ListVolumesResponse")
	proto.RegisterType((*AddNvmeDeviceResponse)(nil), "lightbits.api.duros.v1.AddNvmeDeviceResponse")
	proto.RegisterType((*UpdateVolumeResponse)(nil), "lightbits.api.duros.v1.UpdateVolumeResponse")
	proto.RegisterType((*UpgradeServerResponse)(nil), "lightbits.api.duros.v1.UpgradeServerResponse")
	proto.RegisterType((*UpgradeClusterResponse)(nil), "lightbits.api.duros.v1.UpgradeClusterResponse")
	proto.RegisterType((*ReplaceNodeResponse)(nil), "lightbits.api.duros.v1.ReplaceNodeResponse")
	proto.RegisterType((*DeleteServerResponse)(nil), "lightbits.api.duros.v1.DeleteServerResponse")
	proto.RegisterType((*RemoveServerResponse)(nil), "lightbits.api.duros.v1.RemoveServerResponse")
	proto.RegisterType((*ListServersRequest)(nil), "lightbits.api.duros.v1.ListServersRequest")
	proto.RegisterType((*GetServerRequest)(nil), "lightbits.api.duros.v1.GetServerRequest")
	proto.RegisterType((*ListServersResponse)(nil), "lightbits.api.duros.v1.ListServersResponse")
	proto.RegisterType((*Version)(nil), "lightbits.api.duros.v1.Version")
	proto.RegisterType((*ClusterInfo)(nil), "lightbits.api.duros.v1.ClusterInfo")
	proto.RegisterType((*ClusterHealth)(nil), "lightbits.api.duros.v1.ClusterHealth")
	proto.RegisterType((*Volume)(nil), "lightbits.api.duros.v1.Volume")
	proto.RegisterType((*Server)(nil), "lightbits.api.duros.v1.Server")
}

func init() { proto.RegisterFile("api-service/durosapi.proto", fileDescriptor_ce45ba4fae0322ff) }

var fileDescriptor_ce45ba4fae0322ff = []byte{
	// 2949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x3a, 0x5b, 0x6f, 0x1b, 0xd7,
	0xd1, 0x5e, 0x5e, 0x44, 0x71, 0x28, 0x52, 0xf4, 0x91, 0x2c, 0x31, 0xb4, 0x3f, 0x5b, 0xdf, 0xc6,
	0x71, 0x14, 0xd9, 0x22, 0x63, 0x05, 0x29, 0x12, 0xa7, 0x29, 0xc0, 0x48, 0x8e, 0xa3, 0xc4, 0x92,
	0x99, 0x95, 0xe4, 0xa2, 0x69, 0x1b, 0x63, 0xc9, 0x3d, 0xa1, 0xb6, 0xd9, 0x0b, 0xbb, 0x17, 0x3a,
	0x8a, 0xeb, 0xb6, 0x08, 0xd0, 0x87, 0x16, 0x01, 0x0a, 0x34, 0x45, 0xfa, 0x03, 0xfa, 0x37, 0xda,
	0x1f, 0x50, 0xf4, 0xb1, 0x2f, 0xfd, 0x01, 0x7d, 0xef, 0x0f, 0xe8, 0x4b, 0x71, 0x6e, 0xcb, 0xb3,
	0x37, 0x92, 0x71, 0x5f, 0x6c, 0x9e, 0x39, 0x73, 0x66, 0xe6, 0xcc, 0xed, 0xcc, 0xcc, 0x0a, 0xda,
	0xfa, 0xd8, 0xdc, 0xf5, 0xb1, 0x37, 0x31, 0x87, 0xb8, 0x6b, 0x84, 0x9e, 0xeb, 0xeb, 0x63, 0xb3,
	0x33, 0xf6, 0xdc, 0xc0, 0x45, 0x1b, 0x96, 0x39, 0x3a, 0x0f, 0x06, 0x66, 0xe0, 0x77, 0x08, 0x90,
	0xee, 0x76, 0x26, 0x77, 0xdb, 0x57, 0x47, 0xae, 0x3b, 0xb2, 0x70, 0x97, 0x62, 0x0d, 0xc2, 0xcf,
	0xba, 0xd8, 0x1e, 0x07, 0x17, 0xec, 0x50, 0xfb, 0x46, 0x72, 0x33, 0x30, 0x6d, 0xec, 0x07, 0xba,
	0x3d, 0xe6, 0x08, 0xd7, 0x38, 0x82, 0x3e, 0x36, 0xbb, 0xba, 0xe3, 0xb8, 0x81, 0x1e, 0x98, 0xae,
	0xe3, 0xf3, 0xdd, 0x3b, 0xf4, 0xbf, 0xe1, 0xee, 0x08, 0x3b, 0xbb, 0xfe, 0x53, 0x7d, 0x34, 0xc2,
	0x5e, 0xd7, 0x1d, 0x53, 0x8c, 0x0c, 0xec, 0xd6, 0xd0, 0xb5, 0x6d, 0xd7, 0x79, 0xa2, 0x8f, 0x4d,
	0xbf, 0x3b, 0x71, 0xad, 0xd0, 0xc6, 0x7c, 0xe7, 0x25, 0x79, 0x67, 0x68, 0x85, 0x7e, 0x80, 0x3d,
	0xbe, 0xb5, 0x25, 0x6f, 0x39, 0xa1, 0x65, 0xe9, 0x03, 0x0b, 0x3f, 0x09, 0x2e, 0xc6, 0x58, 0x90,
	0xbd, 0x21, 0x2b, 0xc5, 0x27, 0x2c, 0xfd, 0xc0, 0x1c, 0x4e, 0x35, 0xa3, 0xfe, 0xb9, 0x00, 0x6b,
	0xfb, 0x1e, 0xd6, 0x03, 0xfc, 0x98, 0x32, 0xd5, 0xf0, 0xcf, 0x43, 0xec, 0x07, 0x68, 0x0f, 0x4a,
	0x8e, 0x6e, 0xe3, 0x96, 0xb2, 0xa5, 0x6c, 0x57, 0xdf, 0xbb, 0xfe, 0x87, 0xde, 0xd5, 0xdf, 0x29,
	0xad, 0x4f, 0x7f, 0xac, 0xef, 0x7e, 0xd9, 0xdb, 0xfd, 0xe4, 0xf5, 0xdd, 0xb7, 0x77, 0x9f, 0xfc,
	0xa4, 0xf3, 0xd3, 0x67, 0x77, 0xef, 0xec, 0xbd, 0xf9, 0xc6, 0xf3, 0x9b, 0x1a, 0xc5, 0x45, 0x08,
	0x4a, 0xbe, 0xf9, 0x25, 0x6e, 0x15, 0xc8, 0x19, 0x8d, 0xfe, 0x46, 0xb7, 0xa1, 0xa8, 0x0f, 0xad,
	0x56, 0x71, 0x4b, 0xd9, 0xae, 0xed, 0xbd, 0xd4, 0x89, 0xdb, 0xe1, 0x24, 0xf0, 0x4c, 0x67, 0xf4,
	0xd0, 0xf4, 0x03, 0x8d, 0x60, 0xa1, 0x2d, 0xa8, 0x0d, 0x5d, 0x7b, 0xec, 0x61, 0xdf, 0x37, 0x5d,
	0xa7, 0x55, 0xa2, 0x74, 0x64, 0x10, 0x52, 0x61, 0xc5, 0xc3, 0x63, 0xcb, 0x1c, 0xea, 0xfb, 0x6e,
	0xe8, 0x04, 0xad, 0xf2, 0x96, 0xb2, 0x5d, 0xd7, 0x62, 0x30, 0xd4, 0x85, 0xf2, 0x61, 0xbf, 0x37,
	0xb4, 0x5a, 0x4b, 0xf3, 0x98, 0x32, 0x3c, 0xc2, 0xd6, 0x36, 0x1d, 0x8d, 0xd1, 0xf0, 0x5b, 0x15,
	0x4a, 0x53, 0x06, 0xa9, 0xef, 0xc2, 0xda, 0x01, 0xb6, 0x70, 0x52, 0x49, 0x08, 0x4a, 0x67, 0x67,
	0x87, 0x07, 0x4c, 0x49, 0x1a, 0xfd, 0x4d, 0x60, 0x54, 0x71, 0x5c, 0x09, 0xe4, 0xb7, 0x7a, 0x0b,
	0x9a, 0x3d, 0xc3, 0x38, 0xc1, 0xde, 0x04, 0x7b, 0x33, 0xce, 0xaa, 0xaf, 0xc1, 0x9a, 0x86, 0x6d,
	0x77, 0x82, 0x17, 0x42, 0x65, 0x12, 0xcd, 0x47, 0xfd, 0x14, 0x10, 0xb9, 0x88, 0x3e, 0xc4, 0xc7,
	0xae, 0x11, 0xc9, 0xbe, 0x05, 0xb5, 0x13, 0x6f, 0x48, 0x20, 0xd2, 0x01, 0x19, 0x84, 0x6e, 0x41,
	0xe3, 0x54, 0xf7, 0x46, 0x38, 0x88, 0x90, 0xd8, 0x9d, 0x12, 0x50, 0xf5, 0x42, 0x78, 0x50, 0x5c,
	0x94, 0x6d, 0x58, 0xf5, 0x29, 0xe0, 0xbe, 0x63, 0x8c, 0x5d, 0xd3, 0x09, 0xfc, 0x96, 0xb2, 0x55,
	0xdc, 0xae, 0x6a, 0x49, 0x30, 0xba, 0x0e, 0xc0, 0x40, 0x12, 0x13, 0x09, 0x82, 0x5a, 0x50, 0xf1,
	0x70, 0xe8, 0xe3, 0xc3, 0x3e, 0xf5, 0xa3, 0x65, 0x4d, 0x2c, 0xd5, 0xbf, 0x2a, 0xb0, 0x76, 0x36,
	0x36, 0xf4, 0x45, 0x0c, 0xc3, 0x3d, 0xb1, 0xb0, 0x90, 0x27, 0x46, 0x3e, 0x54, 0x5c, 0xd0, 0x87,
	0x84, 0xef, 0x97, 0x24, 0xdf, 0x4f, 0xb8, 0x73, 0x39, 0xe5, 0xce, 0x6a, 0x00, 0xeb, 0x67, 0xe3,
	0x91, 0xa7, 0x1b, 0xf3, 0xcd, 0x88, 0x6e, 0x42, 0xfd, 0xd0, 0xf1, 0x03, 0xdd, 0xb2, 0xfa, 0x9f,
	0x8f, 0xce, 0x3c, 0x93, 0x2b, 0x2a, 0x0e, 0x24, 0x01, 0xf2, 0xbe, 0xeb, 0x0d, 0x31, 0x27, 0xcb,
	0x15, 0x16, 0x83, 0xa9, 0x27, 0x70, 0x85, 0xff, 0xdc, 0x67, 0xe9, 0x44, 0xb0, 0x4d, 0xb1, 0x50,
	0xb2, 0x58, 0xac, 0x43, 0x99, 0x08, 0xe4, 0xb7, 0x0a, 0xd4, 0x9c, 0x6c, 0xa1, 0x3e, 0x86, 0xf5,
	0x9e, 0x61, 0x1c, 0x4f, 0x6c, 0x7c, 0x80, 0x49, 0xb6, 0x11, 0x34, 0x55, 0x58, 0xf1, 0xb1, 0x67,
	0xea, 0xd6, 0x71, 0x68, 0x0f, 0xb0, 0xc7, 0x49, 0xc6, 0x60, 0xa8, 0x0d, 0xcb, 0x4e, 0xdc, 0xc7,
	0xa2, 0x35, 0x89, 0x1d, 0xa2, 0xe7, 0x53, 0xdd, 0xff, 0xdc, 0x9f, 0xe5, 0xe5, 0x3b, 0xd0, 0x78,
	0x80, 0x83, 0x0f, 0x5c, 0x3f, 0x10, 0x58, 0x2d, 0xa8, 0x9c, 0xbb, 0x7e, 0x70, 0xfc, 0xf1, 0x31,
	0x47, 0x14, 0x4b, 0xf5, 0x21, 0xa3, 0x49, 0x90, 0xfd, 0xb9, 0xd8, 0xc4, 0x3d, 0x59, 0x42, 0x96,
	0xdd, 0x73, 0x0a, 0x51, 0x07, 0x70, 0x59, 0xa2, 0xe6, 0x8f, 0x5d, 0xc7, 0xc7, 0xe8, 0x08, 0x1a,
	0x43, 0xd7, 0x71, 0xf0, 0x30, 0xc0, 0x06, 0xdd, 0xa1, 0xce, 0x5f, 0xdb, 0x7b, 0xa5, 0x93, 0xfd,
	0x14, 0x75, 0xf6, 0x65, 0x6c, 0x2d, 0x71, 0x58, 0x7d, 0x02, 0xab, 0x84, 0x87, 0x1c, 0xc0, 0x48,
	0xce, 0xd0, 0xd3, 0x0c, 0x2c, 0x09, 0x19, 0xf9, 0xcd, 0x67, 0xba, 0x69, 0x85, 0x1e, 0x3e, 0x70,
	0x6d, 0xdd, 0x74, 0xa8, 0x4b, 0x54, 0xb5, 0x38, 0x50, 0xbd, 0x07, 0xcd, 0x07, 0x38, 0x78, 0xb1,
	0xf4, 0x76, 0x93, 0xaa, 0x3e, 0x21, 0x5b, 0xca, 0x40, 0x3a, 0x53, 0xd3, 0x0b, 0xb1, 0x58, 0xf0,
	0x12, 0xa7, 0xb0, 0x41, 0xb5, 0x14, 0x39, 0x61, 0x64, 0x5d, 0xd9, 0xc3, 0x94, 0xb8, 0x87, 0xcd,
	0x4b, 0x3f, 0x6a, 0x07, 0xd6, 0xc9, 0xf5, 0x52, 0x9e, 0xbd, 0x01, 0x4b, 0x27, 0xd4, 0x8b, 0x39,
	0x45, 0xbe, 0x52, 0x2d, 0xd8, 0x4c, 0x49, 0xc1, 0xbd, 0xe2, 0x63, 0xa8, 0x49, 0x60, 0xee, 0x12,
	0xdd, 0x3c, 0x97, 0x38, 0xf3, 0xb1, 0x97, 0x41, 0x45, 0x93, 0x69, 0xa8, 0xbf, 0x51, 0xa0, 0x1e,
	0xf3, 0x9d, 0x19, 0x9e, 0x7c, 0x0d, 0xaa, 0x66, 0xbf, 0x67, 0x18, 0x24, 0xfd, 0xf0, 0x8b, 0x4e,
	0x01, 0x44, 0x47, 0x04, 0x91, 0xea, 0x9e, 0xa9, 0x37, 0x5a, 0x93, 0x54, 0x36, 0xf5, 0x78, 0xbf,
	0x55, 0xa2, 0x91, 0x2f, 0x83, 0xd4, 0xaf, 0x4b, 0xb0, 0x99, 0x23, 0x70, 0x94, 0x1c, 0x89, 0x38,
	0x25, 0x9e, 0x1c, 0xaf, 0x03, 0x38, 0xa1, 0xad, 0x13, 0xaf, 0xe1, 0x5a, 0x2f, 0x69, 0x12, 0x84,
	0x64, 0x19, 0xdb, 0x35, 0xb0, 0xc5, 0x45, 0x61, 0x0b, 0xa2, 0x73, 0x96, 0x39, 0x78, 0xa2, 0xe5,
	0xab, 0x84, 0x0d, 0xcb, 0xa9, 0x27, 0xe4, 0x11, 0x94, 0x49, 0xf5, 0x83, 0x69, 0x4d, 0xd0, 0xd8,
	0x7b, 0xfb, 0x3b, 0xaa, 0xbc, 0x73, 0x42, 0x0e, 0xdf, 0x77, 0x42, 0x5b, 0x63, 0x74, 0xd0, 0xf7,
	0xa1, 0xc6, 0x7d, 0xef, 0xd4, 0xb4, 0x31, 0xad, 0x19, 0x6a, 0x7b, 0xed, 0x0e, 0xab, 0x08, 0x3b,
	0xa2, 0x64, 0xec, 0x9c, 0x8a, 0x92, 0x51, 0x93, 0xd1, 0x51, 0x1f, 0xae, 0x78, 0x78, 0x10, 0x9a,
	0x96, 0xb1, 0xef, 0xda, 0x63, 0x0b, 0x93, 0x4a, 0x90, 0xd2, 0x59, 0x9e, 0x4b, 0x27, 0xfb, 0x60,
	0x14, 0x34, 0x55, 0x29, 0x68, 0x64, 0xa7, 0x5f, 0x49, 0x38, 0x3d, 0x82, 0xd2, 0xfd, 0x53, 0x7d,
	0xd4, 0xaa, 0x33, 0x7c, 0xf2, 0x5b, 0xfd, 0x10, 0xaa, 0xd1, 0x3d, 0xd1, 0x32, 0x94, 0x8e, 0x5d,
	0x07, 0x37, 0x2f, 0xa1, 0x1a, 0x54, 0x3e, 0xc0, 0xba, 0x15, 0x9c, 0x5f, 0x34, 0x15, 0x04, 0xb0,
	0xd4, 0x33, 0x0c, 0xd3, 0x19, 0x35, 0x0b, 0xa8, 0x01, 0xa0, 0x31, 0x61, 0xc8, 0xba, 0x48, 0xf6,
	0xde, 0xd7, 0x4d, 0x0b, 0x1b, 0xcd, 0x92, 0xfa, 0x97, 0x0a, 0xd4, 0x0f, 0x88, 0x56, 0xa9, 0x39,
	0x9d, 0xcf, 0xdc, 0x85, 0xf3, 0x55, 0x4f, 0x98, 0xaa, 0x48, 0x4d, 0x75, 0x3b, 0xcf, 0x54, 0x31,
	0xea, 0xcc, 0x40, 0xc2, 0x38, 0x1f, 0xc2, 0x12, 0xf9, 0x11, 0xfa, 0xd4, 0x4b, 0x1a, 0x7b, 0x7b,
	0x09, 0x1a, 0xd1, 0xb3, 0x37, 0x76, 0xbd, 0x00, 0x1b, 0x84, 0x08, 0x3d, 0x4f, 0xa9, 0x84, 0x3e,
	0xb5, 0x33, 0xa7, 0x40, 0xde, 0x2f, 0x67, 0x62, 0x63, 0x51, 0xad, 0x70, 0xdf, 0x8a, 0xc1, 0x48,
	0xa5, 0x14, 0x4b, 0x44, 0x7e, 0x6b, 0x89, 0x06, 0x48, 0x02, 0x4a, 0xa2, 0x88, 0x43, 0x88, 0xcc,
	0xd4, 0x69, 0xaa, 0x9a, 0x0c, 0x42, 0xe7, 0x80, 0x78, 0x89, 0x7f, 0xa4, 0x3b, 0xfa, 0x08, 0x7b,
	0x47, 0xae, 0xc1, 0xbc, 0xa2, 0xb1, 0xf7, 0xd6, 0x62, 0x9a, 0xd8, 0x4f, 0x9d, 0xd7, 0x32, 0x68,
	0xc6, 0xa2, 0xbd, 0x9a, 0x88, 0xf6, 0x5b, 0xd0, 0x30, 0x9d, 0x87, 0xee, 0x50, 0xb7, 0xb8, 0x7d,
	0x5b, 0x40, 0xcb, 0x88, 0x04, 0x14, 0xed, 0xc1, 0xba, 0x25, 0xad, 0xfb, 0x9e, 0x3b, 0xa2, 0xa9,
	0xa5, 0x46, 0x2b, 0xe8, 0xcc, 0x3d, 0x74, 0x07, 0x2e, 0x3b, 0xa1, 0xcd, 0x24, 0x31, 0x44, 0x22,
	0x24, 0xde, 0x59, 0xd6, 0xd2, 0x1b, 0x44, 0x12, 0x5b, 0xff, 0x42, 0xce, 0x99, 0x75, 0x4a, 0x3b,
	0x01, 0x45, 0x0d, 0x28, 0xe0, 0x61, 0xab, 0x41, 0xa5, 0x2c, 0xe0, 0x21, 0x3a, 0x04, 0x98, 0x76,
	0x3b, 0xad, 0x55, 0x1a, 0x55, 0xaf, 0xe5, 0xe9, 0x4f, 0xd8, 0x9f, 0x61, 0xf7, 0xc6, 0xa6, 0x26,
	0x1d, 0x4e, 0xa4, 0x96, 0x66, 0x2a, 0xb5, 0x88, 0x48, 0xba, 0x3c, 0x8d, 0x24, 0xa2, 0x5c, 0x0f,
	0xeb, 0xc6, 0x23, 0xc7, 0xba, 0x68, 0x21, 0x2a, 0x54, 0xb4, 0x56, 0xdf, 0x04, 0x94, 0x36, 0x11,
	0x89, 0xa5, 0xde, 0x30, 0x30, 0x27, 0x98, 0xac, 0x9a, 0x97, 0xd0, 0x2a, 0xd4, 0xfa, 0xba, 0xef,
	0x0b, 0x80, 0xa2, 0x5a, 0x50, 0xa6, 0x3e, 0x4a, 0xc2, 0xf1, 0xcc, 0xf9, 0xdc, 0x71, 0x9f, 0x3a,
	0xcd, 0x4b, 0x34, 0x1c, 0xe9, 0xb1, 0xa6, 0x12, 0x91, 0xd0, 0x03, 0x16, 0x9e, 0x2b, 0xb0, 0x7c,
	0xe8, 0xe8, 0x6c, 0xb7, 0x48, 0x76, 0xcf, 0x1c, 0x3d, 0x08, 0xf4, 0xe1, 0x39, 0x09, 0x50, 0x54,
	0x87, 0x6a, 0x8f, 0xae, 0x08, 0xf2, 0x12, 0x59, 0x1e, 0x60, 0xb1, 0xac, 0xa8, 0x7d, 0xf6, 0x58,
	0x13, 0xcd, 0x4c, 0xd3, 0xf8, 0x3b, 0x50, 0x26, 0xf9, 0x63, 0x6e, 0x29, 0x13, 0xf3, 0x47, 0x8d,
	0x9d, 0x51, 0x1f, 0xc1, 0xda, 0xf4, 0xf9, 0x9f, 0xd2, 0x7c, 0x0b, 0x2a, 0xec, 0x15, 0x11, 0x54,
	0xaf, 0xe7, 0x51, 0xe5, 0x85, 0x83, 0x40, 0x57, 0x37, 0xe1, 0x4a, 0xa2, 0xe0, 0x64, 0x24, 0xd5,
	0x0d, 0x52, 0x54, 0xcb, 0x3d, 0x01, 0x87, 0x6f, 0x46, 0x65, 0xaf, 0x28, 0xb6, 0xf9, 0x46, 0x0b,
	0x36, 0x92, 0xf5, 0x30, 0xdf, 0xb9, 0x42, 0x1a, 0x32, 0xa9, 0x75, 0x9a, 0x72, 0x88, 0x37, 0x5f,
	0x53, 0x78, 0xbc, 0x7f, 0xe3, 0xf0, 0x3f, 0x29, 0x80, 0xc8, 0xe5, 0x19, 0xd8, 0x9f, 0x53, 0xfc,
	0x1c, 0x4b, 0xc5, 0x0f, 0xf9, 0x8d, 0x7e, 0x44, 0x9a, 0x1c, 0x2a, 0x9f, 0x3e, 0x30, 0x2d, 0x33,
	0xb8, 0x38, 0x91, 0xf2, 0xe3, 0xab, 0x09, 0x7d, 0xc5, 0x31, 0x49, 0x2a, 0xe3, 0xb9, 0x31, 0x8b,
	0x06, 0xa9, 0xae, 0x1f, 0xe0, 0x60, 0x7e, 0x0f, 0xc9, 0xad, 0x17, 0x5d, 0x60, 0x6a, 0x3d, 0x16,
	0x09, 0x73, 0xad, 0xc7, 0x59, 0x08, 0x74, 0xd2, 0xb9, 0x55, 0x1e, 0x63, 0x8f, 0x36, 0xf5, 0xd7,
	0xa0, 0x4a, 0x73, 0xc4, 0x01, 0xb9, 0x15, 0xe3, 0x3a, 0x05, 0x90, 0xf8, 0x1b, 0xba, 0xb6, 0x6d,
	0x06, 0x1f, 0xe8, 0xfe, 0xb9, 0x28, 0xcf, 0xa6, 0x10, 0x52, 0xee, 0x4c, 0x18, 0x21, 0x5e, 0x2a,
	0x88, 0x25, 0x39, 0xa9, 0x8f, 0x4d, 0xce, 0x85, 0x17, 0x0c, 0x12, 0x84, 0xf0, 0xb5, 0x06, 0x62,
	0x9b, 0xe5, 0xf5, 0x29, 0x80, 0xec, 0x8e, 0x5c, 0xb1, 0xbb, 0xc4, 0x76, 0x23, 0x80, 0xfa, 0xcf,
	0x22, 0xd4, 0xb8, 0xb7, 0x88, 0xd7, 0x2d, 0x65, 0x4b, 0xd2, 0xfa, 0x84, 0x03, 0xff, 0xc2, 0x0f,
	0xb0, 0x4d, 0xaa, 0xb1, 0x02, 0x6f, 0x7d, 0x24, 0x18, 0xea, 0x00, 0x1a, 0x86, 0x9e, 0x87, 0x9d,
	0xe0, 0x48, 0xff, 0x22, 0x1a, 0x41, 0x14, 0x69, 0x92, 0xcb, 0xd8, 0x21, 0x29, 0xd7, 0x0f, 0xc7,
	0xec, 0xdd, 0x92, 0x4f, 0x94, 0x58, 0xca, 0xcd, 0xda, 0x43, 0x0f, 0x63, 0xc9, 0xb0, 0x4c, 0x93,
	0xe1, 0x9d, 0xdc, 0x3e, 0x84, 0x5d, 0x2a, 0x3f, 0x1f, 0x8a, 0x7c, 0xb7, 0x24, 0xe5, 0xbb, 0x77,
	0x61, 0xe9, 0x9c, 0x96, 0x08, 0xbc, 0x10, 0x7a, 0x65, 0x0e, 0x75, 0x56, 0x4f, 0x68, 0xfc, 0x10,
	0x7a, 0x1d, 0xd6, 0x8e, 0x4c, 0x87, 0xab, 0xf6, 0xd0, 0xe1, 0x48, 0xf4, 0xd9, 0xab, 0x6a, 0x59,
	0x5b, 0xe4, 0x15, 0x39, 0x32, 0x9d, 0x9e, 0x65, 0xb9, 0x4f, 0xb1, 0x21, 0x8c, 0xc4, 0x9e, 0xb1,
	0xf4, 0x06, 0xc5, 0xd6, 0xbf, 0x48, 0x60, 0x03, 0xc7, 0x4e, 0x6e, 0xa8, 0x7f, 0x2b, 0x40, 0x3d,
	0x26, 0xe7, 0xb4, 0x24, 0x51, 0x66, 0x97, 0x24, 0xb1, 0x53, 0xf1, 0x92, 0xa4, 0x03, 0xc8, 0x09,
	0xed, 0x03, 0x4c, 0x43, 0xd0, 0xe0, 0x59, 0x90, 0x7a, 0x44, 0x5d, 0xcb, 0xd8, 0xe1, 0xf8, 0x1a,
	0x7f, 0x34, 0x04, 0x7e, 0x31, 0xc2, 0x4f, 0xec, 0xa0, 0xef, 0xc1, 0x86, 0x13, 0xda, 0xc7, 0x6e,
	0xd0, 0x9b, 0xe8, 0x26, 0x9d, 0x03, 0x8a, 0x33, 0xcc, 0x33, 0x72, 0x76, 0xd1, 0x0e, 0x34, 0x9d,
	0xd0, 0x16, 0xef, 0x04, 0xcd, 0xf7, 0x7c, 0xa8, 0x96, 0x82, 0xab, 0x77, 0xc5, 0x13, 0x34, 0xad,
	0x0d, 0x97, 0xa0, 0xf0, 0xe8, 0xa3, 0xa6, 0x42, 0x1e, 0xa5, 0x1f, 0xea, 0x9e, 0xc3, 0x1e, 0x9e,
	0x2a, 0x94, 0xef, 0x7b, 0x9e, 0xeb, 0x35, 0x8b, 0xea, 0xbf, 0xcb, 0xb0, 0xc4, 0x58, 0xa1, 0x1f,
	0xc4, 0x95, 0xb8, 0x3d, 0x3b, 0xcf, 0xa7, 0x2b, 0xee, 0x33, 0x58, 0x25, 0xe5, 0x30, 0x1e, 0x92,
	0x9a, 0x97, 0x65, 0xc0, 0xc2, 0x6c, 0x73, 0xf4, 0xe3, 0xe8, 0x94, 0x58, 0x92, 0x46, 0x6a, 0xa2,
	0x58, 0xcc, 0x98, 0x28, 0xf2, 0x42, 0x9a, 0x64, 0x40, 0xde, 0xfa, 0x44, 0xeb, 0x28, 0xf0, 0xcb,
	0x89, 0x0e, 0xd6, 0x37, 0x0d, 0x1a, 0x22, 0x75, 0x8d, 0xfe, 0x16, 0xe3, 0xa7, 0xca, 0x8b, 0x0c,
	0x42, 0x97, 0xd3, 0x83, 0x50, 0xd1, 0x52, 0x55, 0xa5, 0x96, 0x4a, 0x54, 0xd8, 0x20, 0x55, 0xd8,
	0xdb, 0xb0, 0xea, 0x65, 0x54, 0x67, 0x55, 0x2d, 0x09, 0x46, 0x1f, 0xc5, 0xb2, 0xc4, 0x0a, 0x95,
	0xf3, 0xf6, 0x6c, 0x23, 0xe5, 0x27, 0x89, 0x68, 0x7e, 0x56, 0x5f, 0x7c, 0x7e, 0x46, 0xb3, 0x4a,
	0x43, 0xca, 0x2a, 0xb7, 0x52, 0x33, 0x94, 0x55, 0x56, 0x56, 0x27, 0x86, 0x23, 0x3f, 0x93, 0xfb,
	0x96, 0x58, 0x79, 0xb4, 0x02, 0xcb, 0x74, 0x34, 0x49, 0xfc, 0x52, 0xa1, 0x25, 0x8f, 0xf0, 0x7f,
	0x56, 0x1f, 0xd1, 0x57, 0x9c, 0x35, 0x2f, 0x35, 0xa8, 0xb0, 0x37, 0x9d, 0x14, 0x47, 0xd3, 0x4e,
	0xa6, 0x42, 0xd0, 0x68, 0x39, 0x41, 0xd0, 0x96, 0xd5, 0x1b, 0xb0, 0xd2, 0xa7, 0x73, 0x7d, 0xd7,
	0xa2, 0xec, 0x48, 0x9d, 0xc6, 0xd7, 0xa7, 0xfb, 0xfd, 0xe6, 0x25, 0xf5, 0x3f, 0x45, 0x3a, 0x16,
	0x98, 0x60, 0x2f, 0xb3, 0xbb, 0x11, 0x36, 0x2a, 0x4a, 0x36, 0xca, 0x79, 0xdf, 0x4b, 0xff, 0xfb,
	0xfb, 0x4e, 0x9e, 0x40, 0x1a, 0xbb, 0xac, 0x6d, 0x2f, 0x53, 0xf5, 0x49, 0x10, 0x74, 0x2f, 0xde,
	0x17, 0xdf, 0x4c, 0xda, 0x89, 0x5e, 0x24, 0x52, 0x6e, 0x3c, 0xa5, 0x6d, 0xc3, 0xea, 0x49, 0x62,
	0xc0, 0x5b, 0x61, 0x03, 0xde, 0x04, 0x38, 0x32, 0xee, 0x72, 0xdc, 0xb8, 0x0f, 0x09, 0xaf, 0x47,
	0x27, 0xf1, 0xf4, 0x9d, 0x80, 0xa2, 0xc7, 0x50, 0x17, 0x55, 0x1b, 0x6b, 0xe9, 0x80, 0x4a, 0xfa,
	0xfa, 0xec, 0x42, 0xa3, 0x13, 0x3b, 0x43, 0x23, 0x3f, 0x4e, 0x46, 0x3d, 0x85, 0xcb, 0x29, 0x9c,
	0xb8, 0xf3, 0x88, 0x2c, 0xa7, 0x48, 0xee, 0x50, 0x20, 0x4e, 0xc4, 0xce, 0x31, 0xb7, 0xa9, 0x43,
	0x55, 0xc3, 0x03, 0xd7, 0xa5, 0xee, 0x51, 0xda, 0x31, 0x60, 0x2d, 0x23, 0xeb, 0xc4, 0xe9, 0x22,
	0x68, 0xbc, 0x1f, 0x5a, 0xd6, 0x05, 0x47, 0xc4, 0x46, 0x53, 0x61, 0xbe, 0xc8, 0x5e, 0x00, 0xe6,
	0x99, 0x22, 0xbf, 0x37, 0x8b, 0xa8, 0x09, 0x2b, 0x72, 0xe6, 0x6e, 0x96, 0xf6, 0xfe, 0xbe, 0x09,
	0xcb, 0xb4, 0xc8, 0xee, 0xf5, 0x0f, 0xd1, 0xa7, 0x00, 0x0f, 0x70, 0x20, 0xd4, 0xb5, 0x91, 0x1a,
	0x1d, 0xdc, 0xb7, 0xc7, 0xc1, 0x45, 0xfb, 0x46, 0x6e, 0x24, 0xf3, 0x57, 0x6f, 0xf3, 0xab, 0x7f,
	0xfc, 0xeb, 0x9b, 0xc2, 0x65, 0xb4, 0x4a, 0x3f, 0x67, 0x4d, 0xee, 0x76, 0x45, 0x15, 0xf5, 0x14,
	0x56, 0xe4, 0x0f, 0x44, 0x28, 0xff, 0xf5, 0x4b, 0x7f, 0x46, 0x6a, 0xcf, 0xa9, 0xe6, 0xd5, 0x36,
	0xe5, 0xba, 0xae, 0x4e, 0xb9, 0xb2, 0x77, 0xe9, 0x9e, 0xb2, 0x83, 0x7c, 0x58, 0x91, 0x3f, 0xba,
	0xe4, 0x33, 0xce, 0xf8, 0x34, 0xd3, 0xce, 0xd1, 0x83, 0x7a, 0x9d, 0x32, 0x6c, 0xed, 0x6c, 0x24,
	0x18, 0x76, 0x9f, 0x91, 0x80, 0x78, 0x8e, 0x7e, 0x09, 0x35, 0xa9, 0x4d, 0x41, 0xb9, 0x3d, 0x63,
	0x6a, 0x94, 0xd9, 0xbe, 0x3d, 0x1f, 0xd5, 0x9f, 0xf6, 0x22, 0x29, 0x6d, 0x73, 0x86, 0x5f, 0x29,
	0x50, 0xe1, 0x73, 0x6c, 0x74, 0x2b, 0x8f, 0x62, 0x7c, 0xd0, 0xdd, 0x5e, 0x6c, 0xa6, 0xac, 0x6e,
	0x53, 0x9e, 0x2a, 0xda, 0x12, 0x3c, 0xe3, 0x69, 0xb4, 0xfb, 0x8c, 0x8f, 0x09, 0x9f, 0xa3, 0x5f,
	0x2b, 0x50, 0x8d, 0x46, 0xda, 0x68, 0x7b, 0xd6, 0xc5, 0xe4, 0x19, 0x7a, 0xfb, 0xb5, 0x05, 0x30,
	0xb9, 0x02, 0xb8, 0x1d, 0xd0, 0x46, 0xb6, 0x30, 0x28, 0x84, 0x6a, 0x34, 0x8f, 0xce, 0x97, 0x20,
	0x39, 0xb2, 0x9e, 0xeb, 0x6f, 0x29, 0xb6, 0x09, 0xf3, 0x4f, 0xd8, 0xc5, 0x69, 0x86, 0x44, 0xaf,
	0xce, 0xba, 0x8e, 0x34, 0xee, 0x9e, 0x7d, 0xef, 0x58, 0x0f, 0xad, 0x5e, 0xa1, 0x02, 0xac, 0xa2,
	0xba, 0x10, 0x80, 0x76, 0xc7, 0x68, 0x42, 0xad, 0x4e, 0x50, 0x67, 0x5a, 0x5d, 0x66, 0xba, 0x58,
	0xfb, 0xad, 0x5e, 0xa3, 0x0c, 0x37, 0xd0, 0x7a, 0x8c, 0xa1, 0xb8, 0xef, 0xef, 0x15, 0xfe, 0x61,
	0x41, 0x9a, 0xa5, 0x74, 0x66, 0xde, 0x26, 0x35, 0x5b, 0x6f, 0x77, 0x17, 0xc6, 0xe7, 0x3a, 0xb8,
	0x4a, 0x45, 0xba, 0x82, 0xd6, 0x22, 0x91, 0x24, 0xee, 0x7f, 0x54, 0xa0, 0x1e, 0x1b, 0xb7, 0xa3,
	0x3b, 0xb3, 0x14, 0x92, 0x9c, 0xca, 0xb7, 0xbf, 0xeb, 0x34, 0x5d, 0xbd, 0x49, 0xa5, 0xb9, 0x8e,
	0xae, 0x65, 0x48, 0xd3, 0x7d, 0xc6, 0x66, 0xfa, 0xcf, 0xd1, 0x80, 0x66, 0x59, 0xd1, 0x7e, 0xe4,
	0x65, 0xd9, 0x97, 0xe7, 0x74, 0x06, 0xd4, 0x22, 0xa9, 0xd8, 0xe7, 0xd3, 0x39, 0xf4, 0xb5, 0x02,
	0xf5, 0xd8, 0x48, 0x23, 0xff, 0xea, 0x59, 0x9f, 0xda, 0xda, 0xbb, 0x0b, 0x62, 0xc7, 0x43, 0x50,
	0xcd, 0x32, 0x03, 0xc9, 0xbf, 0x5f, 0x2b, 0xb0, 0x22, 0x0f, 0x52, 0xf2, 0x13, 0x70, 0xc6, 0x27,
	0xd8, 0xf6, 0x9d, 0xc5, 0x90, 0xb9, 0x2c, 0xff, 0x4f, 0x65, 0xb9, 0xda, 0xce, 0x89, 0x4b, 0x22,
	0x0e, 0xcb, 0x08, 0xbc, 0xb4, 0x9a, 0x95, 0x11, 0x62, 0xd3, 0x8c, 0xf6, 0x9c, 0x89, 0x44, 0x3a,
	0x23, 0xf0, 0x09, 0x85, 0x88, 0x90, 0x5f, 0xb1, 0x07, 0x81, 0x4f, 0x3e, 0xd0, 0xce, 0x2c, 0x67,
	0x8f, 0xcf, 0x77, 0x66, 0xbf, 0x08, 0x89, 0x51, 0x4a, 0xda, 0x2b, 0xb8, 0x1c, 0xe8, 0x5b, 0x65,
	0x5a, 0x01, 0xb1, 0xcb, 0xcf, 0x50, 0x6d, 0xfa, 0x5b, 0x72, 0xbe, 0x57, 0x64, 0x0f, 0xc3, 0xf8,
	0x2b, 0xa1, 0xfe, 0x5f, 0x5c, 0x0e, 0xae, 0x8e, 0x6e, 0xc8, 0x0e, 0x11, 0x83, 0x7c, 0xa3, 0x40,
	0x23, 0x3e, 0x37, 0x43, 0xf3, 0x78, 0xc5, 0xbf, 0x37, 0xb7, 0x3b, 0x8b, 0xa2, 0x73, 0xd9, 0x54,
	0x2a, 0xdb, 0x35, 0x75, 0x33, 0x11, 0x39, 0xb2, 0x54, 0x51, 0xb9, 0xc2, 0x95, 0x35, 0xa7, 0x5c,
	0xf9, 0x6e, 0xce, 0x92, 0x2a, 0x57, 0xb8, 0x91, 0x08, 0xe3, 0x6f, 0x15, 0xa8, 0x49, 0xc3, 0xc2,
	0x7c, 0x4f, 0x49, 0xff, 0x31, 0x46, 0xbe, 0xa7, 0x64, 0x4d, 0x1f, 0x3b, 0x54, 0x88, 0x6d, 0xf5,
	0xe5, 0x44, 0x46, 0x97, 0xfe, 0x76, 0xe3, 0x79, 0xd7, 0x63, 0x07, 0x89, 0x60, 0xbf, 0x55, 0x44,
	0x21, 0x35, 0x4f, 0x25, 0x19, 0x7f, 0x51, 0x92, 0x1f, 0xc7, 0x99, 0x13, 0xd0, 0x54, 0x79, 0x95,
	0x88, 0xa6, 0x5f, 0x40, 0x35, 0xfa, 0x4b, 0x98, 0xfc, 0x20, 0x4e, 0xfe, 0xb1, 0xcc, 0x5c, 0xbb,
	0xbc, 0x42, 0xd9, 0xde, 0x50, 0xdb, 0xd9, 0x6c, 0xbb, 0xba, 0x61, 0x70, 0x8f, 0x5d, 0x91, 0x07,
	0xb4, 0x68, 0x86, 0xde, 0x53, 0x7f, 0x86, 0x93, 0xaf, 0x89, 0xcc, 0x99, 0x6f, 0x4e, 0x1c, 0x45,
	0x22, 0x79, 0xf4, 0xd0, 0x3d, 0x65, 0xe7, 0xbd, 0xd5, 0x4f, 0xea, 0x94, 0xd4, 0x3b, 0xf4, 0xdf,
	0xf1, 0x60, 0xb0, 0x44, 0x5f, 0x95, 0x37, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x42, 0x18, 0x11,
	0x3b, 0xd2, 0x26, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DurosAPIClient is the client API for DurosAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DurosAPIClient interface {
	// Get system version information.
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error)
	// Create volume.
	//
	// a volume has a user defined name, maximum capacity and an Access Control List (ACL).
	// the user may also select if to  enable/disable or compression for all data stored on this volume.
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	// Delete volume.
	//
	// In order to delete a volume you only need to give its UUID.
	// Delete will probably take a while, and you can check volume state with GetVolume
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve volume list with filtering option.
	//
	// A request to List Volumes  is exposed via this API.
	// option to filter via Name is done by the following parameters:
	// 1. UUID - e.g.  api/v1/volumes?UUID=<UUID>
	// 2. FailureDomain - e.g. api/v1/volumes?FailureDomain=<FailureDomain>
	ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error)
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error)
	// Retrieve a specific Volume info based on UUID
	//
	// Request volume info identified by UUID
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	// Retrieve Node List with filtering option.
	//
	// A request to List Nodes is exposed via this API.
	// option to filter via Name is done by the following parameters:
	// 1. Name - e.g.  api/v1/nodes?Name=<Name>
	// 2. UUID - e.g.  api/v1/nodes?UUID=<UUID>
	// 3. FailureDomain - e.g.  api/v1/nodes?FailureDomain=<FailureDomain>
	ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// Retrieve a specific Node info based on UUID
	//
	// Request volume info identified by UUID
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error)
	// Retrieve list of nvme devices with filtering option.
	//
	// A request to list nvme devices is exposed via this API.
	// The list of nvme devices can be filtered by the following parameters:
	// 1. ServerUUID - e.g.  api/v1/nvmeDevices?ServerUUID=<UUID>
	ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error)
	// Retrieve a specific nvme device with filtering option.
	//
	// Request nvme device info by serial
	// Example usage:
	// api/v1/nvmeDevices/15eb21c0-35ae-478d-b
	GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error)
	// Retrieve cluster information.
	//
	// Cluster information, e.g. cluster UUID and SubsystemNQN is exposed via this API.
	GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ClusterInfo, error)
	AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error)
	// Update volume.
	//
	// update volume enable the change of the following attributes:
	// ACL list, IPACL list
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error)
	// Retrieve a specific server info based on UUID
	//
	// Request server info identified by UUID
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Retrieve servers list with filtering option.
	//
	// A request to list servers is exposed via this API.
	// The results can be filtered by supplying the following filters:
	// 1. Name - e.g.  /api/v1/servers?Name=<Name>
	// 2. UUID - e.g.  /api/v1/servers?UUID=<UUID>
	// 3. UpgradeablilityState - e.g.  /api/v1/servers?UpgradeablilityState=<UpgradeablilityState>
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error)
	UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error)
	// Create Server.
	//
	// A request to create a new server.
	// The requires paramaters in the body are:
	// 1. serverEndpoints - url list of the new server ip addresses as well as etcd ports for peer communication
	// e.g: http://10.0.0.1:2380
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Replace Node.
	//
	// A request to replace one node with a another. The request is identified by the UUID of the replaced node (referred as SrcNodeUUID)
	// The required paramaters in the body are:
	// 1. TargetNodeUUID - the UUID of the target node that replaces the src Node
	ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error)
	// Delete Server.
	//
	// A request to delete a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to delete
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
	// Add Server.
	//
	// A request to add a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to add
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Remove Server.
	//
	// A request to remove a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to remove
	RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error)
}

type durosAPIClient struct {
	cc *grpc.ClientConn
}

func NewDurosAPIClient(cc *grpc.ClientConn) DurosAPIClient {
	return &durosAPIClient{cc}
}

func (c *durosAPIClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error) {
	out := new(ConnectedHost)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error) {
	out := new(ListHostsResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error) {
	out := new(DurosNodeInfo)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error) {
	out := new(ListNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ListNvmeDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error) {
	out := new(UserNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetNvmeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error) {
	out := new(AddNvmeDeviceResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/AddNvmeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error) {
	out := new(UpdateVolumeResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/UpdateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error) {
	out := new(UpgradeServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/UpgradeServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error) {
	out := new(UpgradeClusterResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/UpgradeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error) {
	out := new(ReplaceNodeResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/ReplaceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/AddServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error) {
	out := new(RemoveServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v1.DurosAPI/RemoveServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DurosAPIServer is the server API for DurosAPI service.
type DurosAPIServer interface {
	// Get system version information.
	GetVersion(context.Context, *empty.Empty) (*Version, error)
	// Create volume.
	//
	// a volume has a user defined name, maximum capacity and an Access Control List (ACL).
	// the user may also select if to  enable/disable or compression for all data stored on this volume.
	CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error)
	// Delete volume.
	//
	// In order to delete a volume you only need to give its UUID.
	// Delete will probably take a while, and you can check volume state with GetVolume
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*empty.Empty, error)
	// Retrieve volume list with filtering option.
	//
	// A request to List Volumes  is exposed via this API.
	// option to filter via Name is done by the following parameters:
	// 1. UUID - e.g.  api/v1/volumes?UUID=<UUID>
	// 2. FailureDomain - e.g. api/v1/volumes?FailureDomain=<FailureDomain>
	ListVolumes(context.Context, *ListVolumeRequest) (*ListVolumesResponse, error)
	GetHost(context.Context, *GetHostRequest) (*ConnectedHost, error)
	ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error)
	// Retrieve a specific Volume info based on UUID
	//
	// Request volume info identified by UUID
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	// Retrieve Node List with filtering option.
	//
	// A request to List Nodes is exposed via this API.
	// option to filter via Name is done by the following parameters:
	// 1. Name - e.g.  api/v1/nodes?Name=<Name>
	// 2. UUID - e.g.  api/v1/nodes?UUID=<UUID>
	// 3. FailureDomain - e.g.  api/v1/nodes?FailureDomain=<FailureDomain>
	ListNodes(context.Context, *ListNodeRequest) (*ListNodesResponse, error)
	// Retrieve a specific Node info based on UUID
	//
	// Request volume info identified by UUID
	GetNode(context.Context, *GetNodeRequest) (*DurosNodeInfo, error)
	// Retrieve list of nvme devices with filtering option.
	//
	// A request to list nvme devices is exposed via this API.
	// The list of nvme devices can be filtered by the following parameters:
	// 1. ServerUUID - e.g.  api/v1/nvmeDevices?ServerUUID=<UUID>
	ListNvmeDevices(context.Context, *ListNvmeDevicesRequest) (*ListNvmeDevicesResponse, error)
	// Retrieve a specific nvme device with filtering option.
	//
	// Request nvme device info by serial
	// Example usage:
	// api/v1/nvmeDevices/15eb21c0-35ae-478d-b
	GetNvmeDevice(context.Context, *GetNvmeDeviceRequest) (*UserNvmeDevicesResponse, error)
	// Retrieve cluster information.
	//
	// Cluster information, e.g. cluster UUID and SubsystemNQN is exposed via this API.
	GetCluster(context.Context, *empty.Empty) (*ClusterInfo, error)
	AddNvmeDevice(context.Context, *AddNvmeDeviceRequest) (*AddNvmeDeviceResponse, error)
	// Update volume.
	//
	// update volume enable the change of the following attributes:
	// ACL list, IPACL list
	UpdateVolume(context.Context, *UpdateVolumeRequest) (*UpdateVolumeResponse, error)
	// Retrieve a specific server info based on UUID
	//
	// Request server info identified by UUID
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	// Retrieve servers list with filtering option.
	//
	// A request to list servers is exposed via this API.
	// The results can be filtered by supplying the following filters:
	// 1. Name - e.g.  /api/v1/servers?Name=<Name>
	// 2. UUID - e.g.  /api/v1/servers?UUID=<UUID>
	// 3. UpgradeablilityState - e.g.  /api/v1/servers?UpgradeablilityState=<UpgradeablilityState>
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpgradeServer(context.Context, *UpgradeServerRequest) (*UpgradeServerResponse, error)
	UpgradeCluster(context.Context, *UpgradeClusterRequest) (*UpgradeClusterResponse, error)
	// Create Server.
	//
	// A request to create a new server.
	// The requires paramaters in the body are:
	// 1. serverEndpoints - url list of the new server ip addresses as well as etcd ports for peer communication
	// e.g: http://10.0.0.1:2380
	CreateServer(context.Context, *CreateServerRequest) (*Server, error)
	// Replace Node.
	//
	// A request to replace one node with a another. The request is identified by the UUID of the replaced node (referred as SrcNodeUUID)
	// The required paramaters in the body are:
	// 1. TargetNodeUUID - the UUID of the target node that replaces the src Node
	ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error)
	// Delete Server.
	//
	// A request to delete a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to delete
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	// Add Server.
	//
	// A request to add a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to add
	AddServer(context.Context, *AddServerRequest) (*Server, error)
	// Remove Server.
	//
	// A request to remove a server.
	// The required paramaters in the body are:
	// 1. UUID - UUID of the server to remove
	RemoveServer(context.Context, *RemoveServerRequest) (*RemoveServerResponse, error)
}

func RegisterDurosAPIServer(s *grpc.Server, srv DurosAPIServer) {
	s.RegisterService(&_DurosAPI_serviceDesc, srv)
}

func _DurosAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListVolumes(ctx, req.(*ListVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetHost(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListHosts(ctx, req.(*ListHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNodes(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNvmeDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ListNvmeDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, req.(*ListNvmeDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetNvmeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, req.(*GetNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetCluster(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_AddNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/AddNvmeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, req.(*AddNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/UpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateVolume(ctx, req.(*UpdateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/UpgradeServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeServer(ctx, req.(*UpgradeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/UpgradeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, req.(*UpgradeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ReplaceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ReplaceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/ReplaceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ReplaceNode(ctx, req.(*ReplaceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/AddServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v1.DurosAPI/RemoveServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).RemoveServer(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DurosAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lightbits.api.duros.v1.DurosAPI",
	HandlerType: (*DurosAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _DurosAPI_GetVersion_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _DurosAPI_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _DurosAPI_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _DurosAPI_ListVolumes_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _DurosAPI_GetHost_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _DurosAPI_ListHosts_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _DurosAPI_GetVolume_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DurosAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _DurosAPI_GetNode_Handler,
		},
		{
			MethodName: "ListNvmeDevices",
			Handler:    _DurosAPI_ListNvmeDevices_Handler,
		},
		{
			MethodName: "GetNvmeDevice",
			Handler:    _DurosAPI_GetNvmeDevice_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _DurosAPI_GetCluster_Handler,
		},
		{
			MethodName: "AddNvmeDevice",
			Handler:    _DurosAPI_AddNvmeDevice_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _DurosAPI_UpdateVolume_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _DurosAPI_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _DurosAPI_ListServers_Handler,
		},
		{
			MethodName: "UpgradeServer",
			Handler:    _DurosAPI_UpgradeServer_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _DurosAPI_UpgradeCluster_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _DurosAPI_CreateServer_Handler,
		},
		{
			MethodName: "ReplaceNode",
			Handler:    _DurosAPI_ReplaceNode_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _DurosAPI_DeleteServer_Handler,
		},
		{
			MethodName: "AddServer",
			Handler:    _DurosAPI_AddServer_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _DurosAPI_RemoveServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-service/durosapi.proto",
}
